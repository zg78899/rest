import { ImmerScope } from "./scope";
export declare function willFinalize(): void;
interface ES6Draft {
}
interface ES6State<T = any> {
    scope: ImmerScope;
    modified: boolean;
    finalized: boolean;
    assigned: {
        [property: string]: boolean;
    } | Map<string, boolean>;
    parent: ES6State;
    base: T;
    draft: ES6Draft | null;
    drafts: {
        [property: string]: ES6Draft;
    } | Map<string, ES6Draft>;
    copy: T | null;
    revoke: null | (() => void);
}
/**
 * Returns a new draft of the `base` object.
 *
 * The second argument is the parent draft-state (used internally).
 */
export declare function createProxy<T extends object>(base: T, parent: ES6State): ES6Draft;
export {};
