{"ast":null,"code":"import _defineProperty from \"/Users/pokeoseu/react-tutorial/begin-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/pokeoseu/react-tutorial/begin-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pokeoseu/react-tutorial/begin-react/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useRef, useState, useMemo, useCallback } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction countActiveUsers(users) {\n  console.log('활성사용자수를 세는 중..');\n  return users.filter(user => user.active).length;\n}\n\nfunction App() {\n  const _useState = useState({\n    username: '',\n    email: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputs = _useState2[0],\n        setInputs = _useState2[1];\n\n  const username = inputs.username,\n        email = inputs.email;\n\n  const onChange = e => {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    setInputs(_objectSpread({}, inputs, {\n      [name]: value\n      /**여기서 name은 username와 email이다. */\n\n    }));\n  };\n\n  const _useState3 = useState([{\n    id: 1,\n    username: 'kim',\n    email: 'abx@naver.com',\n    active: true\n  }, {\n    id: 2,\n    username: 'park',\n    email: 'zxc@gmail.com',\n    active: true\n  }, {\n    id: 3,\n    username: 'lee',\n    email: 'zxczc@gmail.com',\n    active: false\n  }]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        users = _useState4[0],\n        setUsers = _useState4[1];\n  /**push splice sort등은 원본 배열을 바꾸기 때문에 사용하지 않는것이 좋다. */\n\n  /**spread 연산자를 사용하여 원본 배열을 복사한 후 사용한다. */\n\n\n  const nextId = useRef(4);\n  /** 이 값이 바뀔때 만다 굳이 rerender할 필요가 없기 때문에 useRef을 사용하여 변수로 관리를 함*/\n\n  /**useRef는 특정 dom을 선택하고 싶을 때 사용할수있지만, 어떤한 변수를 기억하고 싶을때 ,rerendering되어도 계속 기억된다. */\n\n  /**component가 rerender되어도 useRef(4)는 4 이다.*/\n\n  const onCreate = () => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    }; // setUsers([...users,user]);\n\n    setUsers(users.concat(user));\n    /** concat함수를 사용한다. */\n\n    setInputs({\n      username: '',\n      email: ''\n    });\n    console.log(nextId.current); //4\n\n    nextId.current += 1;\n    /** useRef의 값을 조회하여 바꾸게 되면 이값도 바뀌게 된다. 이 값이 바뀐다고 component가 rerender되지 않는다.*/\n  };\n\n  const onRemove = id => {\n    setUsers(users.filter(user => user.id !== id));\n  };\n\n  const onToggle = id => {\n    setUsers(users.map(user => user.id === id ? _objectSpread({}, user, {\n      active: !user.active\n    }) : user));\n  };\n\n  const count = useMemo(() => countActiveUsers(users), [users]); //이함수는 users가 바뀔때에만 호출되고 아닐때에는 이전에의 값을 그대로 사용한다.\n  //useMemo를 사용하면 필요한 연산을 필요할때만 사용할수있다.\n  //useMomo는 사용한 함수를 재사용할수있다.\n\n  return React.createElement(React.Fragment, null, React.createElement(CreateUser, {\n    username: username,\n    email: email,\n    onChange: onChange,\n    onCreate: onCreate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(UserList, {\n    users: users,\n    onRemove: onRemove,\n    onToggle: onToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"\\uD65C\\uC131\\uC0AC\\uC6A9\\uC790\\uC758 \\uC218 : \", count));\n  /** return (\n  //   // <Counter />\n  // ) \n    // return (\n  //   <Wrapper>\n  //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n  //     <Hello color='pink' />\n  //   </Wrapper>\n    // )*/\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pokeoseu/react-tutorial/begin-react/src/App.js"],"names":["React","useRef","useState","useMemo","useCallback","UserList","CreateUser","countActiveUsers","users","console","log","filter","user","active","length","App","username","email","inputs","setInputs","onChange","e","target","name","value","id","setUsers","nextId","onCreate","current","concat","onRemove","onToggle","map","count"],"mappings":"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","sourcesContent":["import React, { useRef, useState ,useMemo,useCallback} from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\n\nfunction countActiveUsers(users) {\n  console.log('활성사용자수를 세는 중..');\n  return users.filter(user => user.active).length;\n}\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: '',\n  });\n  const { username, email } = inputs;\n  const onChange = e => {\n    const { name, value } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value /**여기서 name은 username와 email이다. */\n    });\n  };\n  const [users, setUsers] = useState([\n    {\n      id: 1,\n      username: 'kim',\n      email: 'abx@naver.com',\n      active: true,\n    },\n    {\n      id: 2,\n      username: 'park',\n      email: 'zxc@gmail.com',\n      active: true,\n    },\n    {\n      id: 3,\n      username: 'lee',\n      email: 'zxczc@gmail.com',\n      active: false,\n    }\n  ]);\n\n  /**push splice sort등은 원본 배열을 바꾸기 때문에 사용하지 않는것이 좋다. */\n  /**spread 연산자를 사용하여 원본 배열을 복사한 후 사용한다. */\n\n\n  const nextId = useRef(4);\n  /** 이 값이 바뀔때 만다 굳이 rerender할 필요가 없기 때문에 useRef을 사용하여 변수로 관리를 함*/\n  /**useRef는 특정 dom을 선택하고 싶을 때 사용할수있지만, 어떤한 변수를 기억하고 싶을때 ,rerendering되어도 계속 기억된다. */\n  /**component가 rerender되어도 useRef(4)는 4 이다.*/\n  const onCreate = () => {\n    const user = {\n      id: nextId.current,\n      username,\n      email,\n\n    };\n    // setUsers([...users,user]);\n    setUsers(users.concat(user));/** concat함수를 사용한다. */\n    setInputs({\n      username: '',\n      email: ''\n    });\n    console.log(nextId.current)//4\n    nextId.current += 1; /** useRef의 값을 조회하여 바꾸게 되면 이값도 바뀌게 된다. 이 값이 바뀐다고 component가 rerender되지 않는다.*/\n  };\n  const onRemove = id => {\n    setUsers(users.filter(user => user.id !== id));\n  }\n\n  const onToggle = id => {\n    setUsers(users.map(\n      user => user.id === id ? { ...user, active: !user.active } : user\n    ))\n  }\n  const count =useMemo(()=>countActiveUsers(users),[users]);//이함수는 users가 바뀔때에만 호출되고 아닐때에는 이전에의 값을 그대로 사용한다.\n  //useMemo를 사용하면 필요한 연산을 필요할때만 사용할수있다.\n  //useMomo는 사용한 함수를 재사용할수있다.\n  return (\n    <>\n      <CreateUser\n        username={username}\n        email={email}\n        onChange={onChange}\n        onCreate={onCreate} />\n      <UserList users={users} onRemove={onRemove} onToggle={onToggle} />\n      <div>활성사용자의 수 : {count}</div>\n    </>\n  )\n\n  /** return (\n  //   // <Counter />\n  // ) \n \n  // return (\n  //   <Wrapper>\n  //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n  //     <Hello color='pink' />\n  //   </Wrapper>\n\n\n  // )*/\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}