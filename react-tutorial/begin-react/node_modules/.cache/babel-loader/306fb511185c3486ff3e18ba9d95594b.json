{"ast":null,"code":"var _jsxFileName = \"/Users/pokeoseu/react-tutorial/begin-react/src/UserList.js\";\nimport React, { useContext } from 'react';\nimport UserDispatch from './App'; //처음에 이런 방식을 사용하면 계속해서 배열이 늘어나거나 하는 경우에 사용할수없다.\n//따라서 배열의 내장 함수인 map,forEach등을 사용한다.객체 상태의 배열 컴포넌트 형태의 배열로 변형을 해준다.\n\nconst User = React.memo(function User({\n  user\n}) {\n  //onRemove,onToggle,user을 props로 받아서 사용하고있다.\n  const username = user.username,\n        email = user.email,\n        id = user.id,\n        active = user.active;\n  const dispatch = useContext(UserDispatch);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    style: {\n      color: active ? 'green' : 'black',\n      cursor: 'pointer'\n    },\n    onClick: () => dispatch({\n      type: 'TOGGLE_USER',\n      id\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, username), \" \\xA0\", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"(\", email, \")\"), React.createElement(\"button\", {\n    onClick: () => dispatch({\n      type: 'REMOVE_USER',\n      id\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"\\uC0AD\\uC81C\"));\n}); //React.memo로 함수 전체를 감싸준다. 최적화를 위한 것.\n\nfunction UserList({\n  users,\n  onRemove,\n  onToggle\n}) {\n  //UserList는 다리역할을 할뿐 실제로 \n  //UserList에서 직접 onToggle과 onRemove을 직접사용하고있지않다.그러나  User에게 전달해줘야하기때문에\n  //App.js에서 UserList에서 onToggle,onRemove을 하고있다.\n  //UserList는 User에게 props을 전달해주고있다.\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, users.map(user => React.createElement(User, {\n    user: user,\n    key: user.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })));\n}\n\nexport default React.memo(UserList, (prevProps, nextProps) => prevProps.users === nextProps.users); //prevProps의 users와 nextProps의 users가 같다면 재린더링하지않겠다.\n//props가 바뀌지않으면 re 렌더링 방지.\n//연산된값을 재사용하기위해서는 useMemo을 사용하고\n//특정함수를 재사용하기 위해서는 useCallback을 사용하고\n//컴포넌트 렌더링된 결과를 재사용하기위해서는 React.memo을 사용한다.\n//useCallback을 사용하여 함수를 재사용하는것이 성능이 좋아지는 것은 아니다.(개선되는 것이 아니다.)(참고),\n//1.useMemo,useCallback,React.memo\n//2.함수형업데이트,샅애를 업데이트할때 useState,setUsers을 사용\n//3.useReducer을 사용하여 상태를 관리할수있다.","map":{"version":3,"sources":["/Users/pokeoseu/react-tutorial/begin-react/src/UserList.js"],"names":["React","useContext","UserDispatch","User","memo","user","username","email","id","active","dispatch","color","cursor","type","UserList","users","onRemove","onToggle","map","prevProps","nextProps"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,UAAd,QAA+B,OAA/B;AACA,OAAOC,YAAP,MAAyB,OAAzB,C,CACA;AACA;;AACA,MAAMC,IAAI,GAACH,KAAK,CAACI,IAAN,CAAW,SAASD,IAAT,CAAc;AAACE,EAAAA;AAAD,CAAd,EAAqB;AAAC;AAAD,QAClCC,QADkC,GACRD,IADQ,CAClCC,QADkC;AAAA,QACzBC,KADyB,GACRF,IADQ,CACzBE,KADyB;AAAA,QACnBC,EADmB,GACRH,IADQ,CACnBG,EADmB;AAAA,QAChBC,MADgB,GACRJ,IADQ,CAChBI,MADgB;AAEzC,QAAMC,QAAQ,GAAGT,UAAU,CAACC,YAAD,CAA3B;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACC,IAAA,KAAK,EAAE;AACNS,MAAAA,KAAK,EAACF,MAAM,GAAC,OAAD,GAAS,OADf;AAENG,MAAAA,MAAM,EAAC;AAFD,KADR;AAKA,IAAA,OAAO,EAAE,MAAIF,QAAQ,CAAC;AACpBG,MAAAA,IAAI,EAAC,aADe;AAEpBL,MAAAA;AAFoB,KAAD,CALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUCF,QAVD,CADJ,WAYe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAQC,KAAR,MAZf,EAcI;AAAQ,IAAA,OAAO,EAAE,MAAKG,QAAQ,CAAC;AAC7BG,MAAAA,IAAI,EAAC,aADwB;AAE7BL,MAAAA;AAF6B,KAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdJ,CADF;AAqBD,CAzBU,CAAX,C,CA0BA;;AACA,SAASM,QAAT,CAAkB;AAACC,EAAAA,KAAD;AAAOC,EAAAA,QAAP;AAAgBC,EAAAA;AAAhB,CAAlB,EAA6C;AAAC;AAC5C;AACA;AACA;AAGA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIF,KAAK,CAACG,GAAN,CACGb,IAAD,IACA,oBAAC,IAAD;AACA,IAAA,IAAI,EAAEA,IADN;AAEG,IAAA,GAAG,EAAEA,IAAI,CAACG,EAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFJ,CADF;AAeD;;AACD,eAAeR,KAAK,CAACI,IAAN,CAAWU,QAAX,EAAoB,CAACK,SAAD,EAAWC,SAAX,KAAuBD,SAAS,CAACJ,KAAV,KAAoBK,SAAS,CAACL,KAAzE,CAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React,{useContext} from 'react';\nimport UserDispatch from './App';\n//처음에 이런 방식을 사용하면 계속해서 배열이 늘어나거나 하는 경우에 사용할수없다.\n//따라서 배열의 내장 함수인 map,forEach등을 사용한다.객체 상태의 배열 컴포넌트 형태의 배열로 변형을 해준다.\nconst User=React.memo(function User({user}){//onRemove,onToggle,user을 props로 받아서 사용하고있다.\n  const {username,email,id,active}=user;\n  const dispatch = useContext(UserDispatch);\n\n  return(\n    <div>\n        < b\n         style={{\n          color:active?'green':'black',\n          cursor:'pointer'\n        }}\n        onClick={()=>dispatch({\n          type:'TOGGLE_USER',\n          id\n        })}\n        >\n        {username}\n        </b> &nbsp;<span>({email})</span>\n\n        <button onClick={() =>dispatch({\n          type:'REMOVE_USER',\n          id\n        })}>삭제</button>\n      </div>\n  )\n})\n//React.memo로 함수 전체를 감싸준다. 최적화를 위한 것.\nfunction UserList({users,onRemove,onToggle}) {//UserList는 다리역할을 할뿐 실제로 \n  //UserList에서 직접 onToggle과 onRemove을 직접사용하고있지않다.그러나  User에게 전달해줘야하기때문에\n  //App.js에서 UserList에서 onToggle,onRemove을 하고있다.\n  //UserList는 User에게 props을 전달해주고있다.\n\n\n  return (\n    <div>\n      {\n        users.map(\n          (user)=>(\n          <User \n          user={user}\n             key={user.id}\n             \n             />\n             )\n        )\n      }\n    </div>\n  )\n}\nexport default React.memo(UserList,(prevProps,nextProps)=>prevProps.users === nextProps.users);\n//prevProps의 users와 nextProps의 users가 같다면 재린더링하지않겠다.\n//props가 바뀌지않으면 re 렌더링 방지.\n//연산된값을 재사용하기위해서는 useMemo을 사용하고\n//특정함수를 재사용하기 위해서는 useCallback을 사용하고\n//컴포넌트 렌더링된 결과를 재사용하기위해서는 React.memo을 사용한다.\n//useCallback을 사용하여 함수를 재사용하는것이 성능이 좋아지는 것은 아니다.(개선되는 것이 아니다.)(참고),\n//1.useMemo,useCallback,React.memo\n//2.함수형업데이트,샅애를 업데이트할때 useState,setUsers을 사용\n//3.useReducer을 사용하여 상태를 관리할수있다."]},"metadata":{},"sourceType":"module"}