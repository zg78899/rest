{"ast":null,"code":"import _slicedToArray from \"/Users/pokeoseu/react-tutorial/begin-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pokeoseu/react-tutorial/begin-react/src/Counter.js\";\nimport React, { useState } from 'react';\n{\n  /*리액트에서 동적으로 상태를 변경시키는 useState을 가져오겠다. */\n}\n\nfunction Counter() {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        number = _useState2[0],\n        setNumber = _useState2[1];\n  /**number라는 상태를 만들건데 이상태의 기본값을 0으로 하고/setNumber는 현재상태를 바꿔주는(업데이트) 함수이다.  */\n  // const numberState=useState(0);//useState을 호출하게되면 배열을 반환하게 되는데 첫번째 원소를 number두뻔째 원소를 setNumber로 추출하겠다.\n  // const number=numberSate[0];\n  // const setNumber=numberSate[1];// 아래의 값을 비구조화 할당을 사용하여  위의 코드와 같이 사용하였다.\n\n\n  const onIncrease = () => {\n    setNumber(prevNumber => prevNumber + 1); // prevNumber는 이전의 값을 박아서 바꾸겠다는 함수의 로직으로 나타내게된다.함수형 업데이트(최적화와 관련이있다.)\n    // setNumber(number+1);// number은 위의 갑을 참조하여 바꾸겠다.\n  };\n\n  const onDecrease = () => {\n    setNumber(prevNumber => prevNumber - 1); // setNumber(number-1);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, number), React.createElement(\"button\", {\n    onClick: onIncrease,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"+1\"), React.createElement(\"button\", {\n    onClick: onDecrease,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"-1\"));\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/pokeoseu/react-tutorial/begin-react/src/Counter.js"],"names":["React","useState","Counter","number","setNumber","onIncrease","prevNumber","onDecrease"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAAuC;AAAC;AAA2C;;AAEjF,SAASC,OAAT,GAAkB;AAAA,oBACSD,QAAQ,CAAC,CAAD,CADjB;AAAA;AAAA,QACTE,MADS;AAAA,QACFC,SADE;AACqB;AACrC;AACA;AACA;;;AAGA,QAAMC,UAAU,GAAC,MAAI;AACnBD,IAAAA,SAAS,CAACE,UAAU,IAAEA,UAAU,GAAC,CAAxB,CAAT,CADmB,CACgB;AACnC;AACD,GAHD;;AAIA,QAAMC,UAAU,GAAC,MAAI;AACnBH,IAAAA,SAAS,CAACE,UAAU,IAAEA,UAAU,GAAC,CAAxB,CAAT,CADmB,CAEnB;AACD,GAHD;;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,MAAL,CADF,EAEE;AAAQ,IAAA,OAAO,EAAEE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,EAGE;AAAQ,IAAA,OAAO,EAAEE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,CADF;AAOD;;AAEH,eAAeL,OAAf","sourcesContent":["import React, {useState} from 'react'; {/*리액트에서 동적으로 상태를 변경시키는 useState을 가져오겠다. */}\n\n  function Counter(){\n    const [number,setNumber]=useState(0);/**number라는 상태를 만들건데 이상태의 기본값을 0으로 하고/setNumber는 현재상태를 바꿔주는(업데이트) 함수이다.  */\n    // const numberState=useState(0);//useState을 호출하게되면 배열을 반환하게 되는데 첫번째 원소를 number두뻔째 원소를 setNumber로 추출하겠다.\n    // const number=numberSate[0];\n    // const setNumber=numberSate[1];// 아래의 값을 비구조화 할당을 사용하여  위의 코드와 같이 사용하였다.\n\n\n    const onIncrease=()=>{\n      setNumber(prevNumber=>prevNumber+1)// prevNumber는 이전의 값을 박아서 바꾸겠다는 함수의 로직으로 나타내게된다.함수형 업데이트(최적화와 관련이있다.)\n      // setNumber(number+1);// number은 위의 갑을 참조하여 바꾸겠다.\n    }\n    const onDecrease=()=>{\n      setNumber(prevNumber=>prevNumber-1)\n      // setNumber(number-1);\n    }\n    return (\n      <div>\n        <h1>{number}</h1>\n        <button onClick={onIncrease}>+1</button>\n        <button onClick={onDecrease}>-1</button>\n      </div>\n    )\n  }\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}