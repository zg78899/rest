{"ast":null,"code":"import _slicedToArray from \"/Users/pokeoseu/react-tutorial/begin-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pokeoseu/react-tutorial/begin-react/src/Counter.js\";\nimport React, { useReducer } from 'react';\n/*리액트에서 동적으로 상태를 변경시키는 useState을 가져오겠다. */\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n\n    case 'DECREMENT':\n      return state - 1;\n\n    default:\n      // return state;\n      throw new Error('unhandled action');\n  }\n}\n\nfunction Counter() {\n  // const [number,setNumber]=useState(0);/**number라는 상태를 만들건데 이상태의 기본값을 0으로 하고/setNumber는 현재상태를 바꿔주는(업데이트) 함수이다.  */\n  // const numberState=useState(0);//useState을 호출하게되면 배열을 반환하게 되는데 첫번째 원소를 number두뻔째 원소를 setNumber로 추출하겠다.\n  // const number=numberSate[0];\n  // const setNumber=numberSate[1];// 아래의 값을 비구조화 할당을 사용하여  위의 코드와 같이 사용하였다.\n  const _useReducer = useReducer(reducer, 0),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        number = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const onIncrease = () => {\n    dispatch({\n      type: 'INCREMENT'\n    }); // setNumber(prevNumber => prevNumber + 1)// prevNumber는 이전의 값을 박아서 바꾸겠다는 함수의 로직으로 나타내게된다.함수형 업데이트(최적화와 관련이있다.)\n    // setNumber(number+1);// number은 위의 갑을 참조하여 바꾸겠다.\n  };\n\n  const onDecrease = () => {\n    dispatch({\n      type: 'DECREMENT'\n    }); // setNumber(prevNumber => prevNumber - 1)\n    // setNumber(number-1);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, number), React.createElement(\"button\", {\n    onClick: onIncrease,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"+1\"), React.createElement(\"button\", {\n    onClick: onDecrease,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"-1\"));\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/pokeoseu/react-tutorial/begin-react/src/Counter.js"],"names":["React","useReducer","reducer","state","action","type","Error","Counter","number","dispatch","onIncrease","onDecrease"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAA2C;;AAG3C,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAE9B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAOF,KAAK,GAAG,CAAf;;AACF,SAAK,WAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE;AACA,YAAM,IAAIG,KAAJ,CAAU,kBAAV,CAAN;AAPJ;AASD;;AAED,SAASC,OAAT,GAAmB;AACjB;AACA;AACA;AACA;AAJiB,sBAKON,UAAU,CAACC,OAAD,EAAS,CAAT,CALjB;AAAA;AAAA,QAKVM,MALU;AAAA,QAKHC,QALG;;AAQjB,QAAMC,UAAU,GAAG,MAAM;AACvBD,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAR,CADuB,CAEvB;AACA;AACD,GAJD;;AAKA,QAAMM,UAAU,GAAG,MAAM;AACvBF,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAR,CADuB,CAEvB;AACA;AACD,GAJD;;AAKA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKG,MAAL,CADF,EAEE;AAAQ,IAAA,OAAO,EAAEE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,EAGE;AAAQ,IAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,CADF;AAOD;;AAED,eAAeJ,OAAf","sourcesContent":["import React, { useReducer } from 'react'; /*리액트에서 동적으로 상태를 변경시키는 useState을 가져오겠다. */ \n\n\nfunction reducer(state, action) {\n\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    case 'DECREMENT':\n      return state - 1;\n    default:\n      // return state;\n      throw new Error('unhandled action');\n  }\n}\n\nfunction Counter() {\n  // const [number,setNumber]=useState(0);/**number라는 상태를 만들건데 이상태의 기본값을 0으로 하고/setNumber는 현재상태를 바꿔주는(업데이트) 함수이다.  */\n  // const numberState=useState(0);//useState을 호출하게되면 배열을 반환하게 되는데 첫번째 원소를 number두뻔째 원소를 setNumber로 추출하겠다.\n  // const number=numberSate[0];\n  // const setNumber=numberSate[1];// 아래의 값을 비구조화 할당을 사용하여  위의 코드와 같이 사용하였다.\n  const [number,dispatch]=useReducer(reducer,0);\n\n\n  const onIncrease = () => {\n    dispatch({type:'INCREMENT'})\n    // setNumber(prevNumber => prevNumber + 1)// prevNumber는 이전의 값을 박아서 바꾸겠다는 함수의 로직으로 나타내게된다.함수형 업데이트(최적화와 관련이있다.)\n    // setNumber(number+1);// number은 위의 갑을 참조하여 바꾸겠다.\n  }\n  const onDecrease = () => {\n    dispatch({type:'DECREMENT'})\n    // setNumber(prevNumber => prevNumber - 1)\n    // setNumber(number-1);\n  }\n  return (\n    <div>\n      <h1>{number}</h1>\n      <button onClick={onIncrease}>+1</button>\n      <button onClick={onDecrease}>-1</button>\n    </div>\n  )\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}