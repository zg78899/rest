{"ast":null,"code":"import _slicedToArray from \"/Users/pokeoseu/react-tutorial/begin-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/pokeoseu/react-tutorial/begin-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/pokeoseu/react-tutorial/begin-react/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, useMemo } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction countActiveUsers(users) {\n  console.log('활성사용자수를 세는 중..');\n  return users.filter(user => user.active).length;\n}\n\nconst initialState = {\n  users: [{\n    id: 1,\n    username: 'kim',\n    email: 'abx@naver.com',\n    active: true\n  }, {\n    id: 2,\n    username: 'park',\n    email: 'zxc@gmail.com',\n    active: true\n  }, {\n    id: 3,\n    username: 'lee',\n    email: 'zxczc@gmail.com',\n    active: false\n  }]\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CREATE_USER':\n      return {\n        inputs: initialState.inputs,\n        users: state.users.concat(action.user)\n      };\n\n    case 'TOGGLE_USER':\n      return _objectSpread({}, state, {\n        users: state.users.map(user => user.id === action.id ? _objectSpread({}, user, {\n          active: !user.active\n        }) : user)\n      });\n\n    case 'REMOVE_USER':\n      return _objectSpread({}, state, {\n        users: state.users.filter(user => user.id !== action.id) //일치하지않으면 유지하고 일치하면은 제거하겠다.\n\n      });\n\n    default:\n      throw new Error('Unhandeled action');\n  }\n}\n\nexport const UserDispatch = React.createContext(null); //기본값은 필요가 없기 때문에 null 이라고 설정을 해준다.\n\nfunction App() {\n  const _useReducer = useReducer(reducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // const [form,onChange,reset]=useInputs({\n  //   username:'',\n  //   email:''\n  // })\n  // const {username,email}=form;\n\n\n  const users = state.users; // const nextId = useRef(4);\n  // const onCreate = useCallback(() => {\n  //   dispatch({\n  //     type: 'CREATE_USER',\n  //     user: {\n  //       id: nextId.current,\n  //       username,\n  //       email,\n  //     }\n  //   });\n  //   nextId.current += 1;\n  //   reset();//reset은 onCreate을 할때 진행한다.\n  // }, [username, email,reset]);\n  //reset을 넣은 이유는 eslint규칙상 넣어야한다.\n  // const onToggle = useCallback((id) => {\n  //   dispatch({\n  //     type: 'TOGGLE_USER',\n  //     id\n  //   })\n  // }, []);//컴포넌트를 만들때만 사용하고 계속해서 재사용을 할수있기 때문에 deps을 사용하지않아도 된다.\n  // const onRemove = useCallback(id => {\n  //   dispatch({\n  //     type: 'REMOVE_USER',\n  //     id\n  //   })\n  // }, []);\n\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return React.createElement(UserDispatch.Provider, {\n    value: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(CreateUser // username={username}\n  // email={email}\n  // onChange={onChange}\n  // onCreate={onCreate}\n  , {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(UserList, {\n    users: users,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"\\uD65C\\uC131\\uC0AC\\uC6A9\\uC790\\uC758 \\uC218 : \", count)); //useReducer && useState\n\n  /** return (\n  //   // <Counter />\n  // ) \n    // return (\n  //   <Wrapper>\n  //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n  //     <Hello color='pink' />\n  //   </Wrapper>\n    // )*/\n}\n\nexport default App; // import React, { useRef, useState ,useMemo,useCallback} from 'react';\n// import UserList from './UserList';\n// import CreateUser from './CreateUser';\n// function countActiveUsers(users) {\n//   console.log('활성사용자수를 세는 중..');\n//   return users.filter(user => user.active).length;\n// }\n// const initialStata={\n//   inputs:{\n//     username:'',\n//     email:'',\n//   },\n//   users:[\n//     {\n//       id: 1,\n//       username: 'kim',\n//       email: 'abx@naver.com',\n//       active: true,\n//     },\n//     {\n//       id: 2,\n//       username: 'park',\n//       email: 'zxc@gmail.com',\n//       active: true,\n//     },\n//     {\n//       id: 3,\n//       username: 'lee',\n//       email: 'zxczc@gmail.com',\n//       active: false,\n//     }\n//   ]\n// }\n// function App() {\n//   const [inputs, setInputs] = useState({\n//     username: '',\n//     email: '',\n//   });\n//   const { username, email } = inputs;\n//   const onChange =useCallback( e => {\n//     const { name, value } = e.target;\n//     setInputs({\n//       ...inputs,\n//       [name]: value /**여기서 name은 username와 email이다. */\n//     });\n//   },[inputs]);//onChange함수는 inputs가 바뀔때 에만 함수가 새로 만들어지고\n//   // 아닐때에는 이전의 값을 그대로 사용한다.\n//   const [users, setUsers] = useState([\n//     {\n//       id: 1,\n//       username: 'kim',\n//       email: 'abx@naver.com',\n//       active: true,\n//     },\n//     {\n//       id: 2,\n//       username: 'park',\n//       email: 'zxc@gmail.com',\n//       active: true,\n//     },\n//     {\n//       id: 3,\n//       username: 'lee',\n//       email: 'zxczc@gmail.com',\n//       active: false,\n//     }\n//   ]);\n//   /**push splice sort등은 원본 배열을 바꾸기 때문에 사용하지 않는것이 좋다. */\n//   /**spread 연산자를 사용하여 원본 배열을 복사한 후 사용한다. */\n//   const nextId = useRef(4);\n//   /** 이 값이 바뀔때 만다 굳이 rerender할 필요가 없기 때문에 useRef을 사용하여 변수로 관리를 함*/\n//   /**useRef는 특정 dom을 선택하고 싶을 때 사용할수있지만, 어떤한 변수를 기억하고 싶을때 ,rerendering되어도 계속 기억된다. */\n//   /**component가 rerender되어도 useRef(4)는 4 이다.*/\n//   const onCreate =useCallback( () => {\n//     const user = {\n//       id: nextId.current,\n//       username,\n//       email,\n//     };\n//     // setUsers([...users,user]);\n//     setUsers(users=>users.concat(user));\n//     //setUsers에 등록한 콜백함수의 파라미터 users에서 최신users을 조회하게 된다.\n//     //따라서  deps에 users을 제거해도된다.\n//     // 그렇게 되면 onCreate함수는 username과 email이 바뀔때에만 재렌더링이된다.\n//     /** concat함수를 사용한다. */\n//     setInputs({\n//       username: '',\n//       email: ''\n//     });\n//     console.log(nextId.current)//4\n//     nextId.current += 1; /** useRef의 값을 조회하여 바꾸게 되면 이값도 바뀌게 된다. 이 값이 바뀐다고 component가 rerender되지 않는다.*/\n//   },[username,email]);\n//   //useCallback내부에서 사용하는 상태 또는,props로 받는 값들이 있다면 모두deps에 넣어주어야한다.\n//   //[username,email,users];\n//   const onRemove = useCallback(id => {\n//     setUsers(users=>users.filter(user => user.id !== id));\n//   },[]); //onRemove함수는 컴포넌트가 만들어질때 딱한번만 만들고, 렌더링될때만 사용되고 이후에는 계속 전에있는 값만을 재사용한다.\n//   const onToggle = useCallback(id => {\n//     setUsers(users=>users.map(\n//       user => user.id === id ? { ...user, active: !user.active } : user\n//     ))\n//   },[]);\n//   const count =useMemo(()=>countActiveUsers(users),[users]);//이함수는 users가 바뀔때에만 호출되고 아닐때에는 이전에의 값을 그대로 사용한다.\n//   //useMemo를 사용하면 필요한 연산을 필요할때만 사용할수있다.\n//   //useMomo는 사용한 함수를 재사용할수있다.\n//   return (\n//     <>\n//       <CreateUser\n//         username={username}\n//         email={email}\n//         onChange={onChange}\n//         onCreate={onCreate} />\n//       <UserList users={users} ak={onRemove} onToggle={onToggle} />\n//       <div>활성사용자의 수 : {count}</div>\n//     </>\n//   )\n//   /** return (\n//   //   // <Counter />\n//   // ) \n//   // return (\n//   //   <Wrapper>\n//   //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n//   //     <Hello color='pink' />\n//   //   </Wrapper>\n//   // )*/\n// }\n// export default App;","map":{"version":3,"sources":["/Users/pokeoseu/react-tutorial/begin-react/src/App.js"],"names":["React","useReducer","useMemo","UserList","CreateUser","countActiveUsers","users","console","log","filter","user","active","length","initialState","id","username","email","reducer","state","action","type","inputs","concat","map","Error","UserDispatch","createContext","App","dispatch","count"],"mappings":"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":["import React, { useReducer, useMemo, } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\n\nfunction countActiveUsers(users) {\n  console.log('활성사용자수를 세는 중..');\n  return users.filter(user => user.active).length;\n}\nconst initialState = {\n \n  users: [\n    {\n      id: 1,\n      username: 'kim',\n      email: 'abx@naver.com',\n      active: true,\n    },\n    {\n      id: 2,\n      username: 'park',\n      email: 'zxc@gmail.com',\n      active: true,\n    },\n    {\n      id: 3,\n      username: 'lee',\n      email: 'zxczc@gmail.com',\n      active: false,\n    }\n  ]\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    \n    case 'CREATE_USER':\n      return {\n        inputs: initialState.inputs,\n        users: state.users.concat(action.user)\n\n      }\n    case 'TOGGLE_USER':\n      return {\n        ...state,\n        users: state.users.map(\n          user => user.id === action.id ? { ...user, active: !user.active } : user)\n      }\n    case 'REMOVE_USER':\n      return {\n        ...state,\n        users: state.users.filter(\n          user => user.id !== action.id)  //일치하지않으면 유지하고 일치하면은 제거하겠다.\n      }\n    default:\n      throw new Error('Unhandeled action');\n  }\n}\n\nexport const UserDispatch=React.createContext(null);//기본값은 필요가 없기 때문에 null 이라고 설정을 해준다.\n\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  // const [form,onChange,reset]=useInputs({\n  //   username:'',\n  //   email:''\n  // })\n  // const {username,email}=form;\n  const { users } = state;\n  // const nextId = useRef(4);\n  \n\n  \n  // const onCreate = useCallback(() => {\n  //   dispatch({\n  //     type: 'CREATE_USER',\n  //     user: {\n  //       id: nextId.current,\n  //       username,\n  //       email,\n  //     }\n  //   });\n  //   nextId.current += 1;\n  //   reset();//reset은 onCreate을 할때 진행한다.\n\n  // }, [username, email,reset]);\n  //reset을 넣은 이유는 eslint규칙상 넣어야한다.\n\n  // const onToggle = useCallback((id) => {\n  //   dispatch({\n  //     type: 'TOGGLE_USER',\n  //     id\n  //   })\n  // }, []);//컴포넌트를 만들때만 사용하고 계속해서 재사용을 할수있기 때문에 deps을 사용하지않아도 된다.\n  // const onRemove = useCallback(id => {\n  //   dispatch({\n  //     type: 'REMOVE_USER',\n  //     id\n  //   })\n  // }, []);\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return (\n    \n    <UserDispatch.Provider value={dispatch}>{/**value의 값으로 위 상단에있는 function App에 선언한 useReducer을 사용해서 받아온 dispatch값을 사용한다. */}\n      <CreateUser\n        // username={username}\n        // email={email}\n        // onChange={onChange}\n        // onCreate={onCreate}\n      />\n      <UserList\n        users={users}/>\n      <div>\n        활성사용자의 수 : {count}\n      </div>\n    \n    </UserDispatch.Provider>\n      \n  )\n  //useReducer && useState\n\n\n  /** return (\n  //   // <Counter />\n  // ) \n \n  // return (\n  //   <Wrapper>\n  //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n  //     <Hello color='pink' />\n  //   </Wrapper>\n\n\n  // )*/\n}\n\nexport default App;\n\n// import React, { useRef, useState ,useMemo,useCallback} from 'react';\n// import UserList from './UserList';\n// import CreateUser from './CreateUser';\n\n\n// function countActiveUsers(users) {\n//   console.log('활성사용자수를 세는 중..');\n//   return users.filter(user => user.active).length;\n// }\n// const initialStata={\n//   inputs:{\n//     username:'',\n//     email:'',\n//   },\n//   users:[\n//     {\n//       id: 1,\n//       username: 'kim',\n//       email: 'abx@naver.com',\n//       active: true,\n//     },\n//     {\n//       id: 2,\n//       username: 'park',\n//       email: 'zxc@gmail.com',\n//       active: true,\n//     },\n//     {\n//       id: 3,\n//       username: 'lee',\n//       email: 'zxczc@gmail.com',\n//       active: false,\n//     }\n//   ]\n\n// }\n// function App() {\n//   const [inputs, setInputs] = useState({\n//     username: '',\n//     email: '',\n//   });\n//   const { username, email } = inputs;\n//   const onChange =useCallback( e => {\n//     const { name, value } = e.target;\n//     setInputs({\n//       ...inputs,\n//       [name]: value /**여기서 name은 username와 email이다. */\n//     });\n//   },[inputs]);//onChange함수는 inputs가 바뀔때 에만 함수가 새로 만들어지고\n//   // 아닐때에는 이전의 값을 그대로 사용한다.\n\n//   const [users, setUsers] = useState([\n//     {\n//       id: 1,\n//       username: 'kim',\n//       email: 'abx@naver.com',\n//       active: true,\n//     },\n//     {\n//       id: 2,\n//       username: 'park',\n//       email: 'zxc@gmail.com',\n//       active: true,\n//     },\n//     {\n//       id: 3,\n//       username: 'lee',\n//       email: 'zxczc@gmail.com',\n//       active: false,\n//     }\n//   ]);\n\n//   /**push splice sort등은 원본 배열을 바꾸기 때문에 사용하지 않는것이 좋다. */\n//   /**spread 연산자를 사용하여 원본 배열을 복사한 후 사용한다. */\n\n\n//   const nextId = useRef(4);\n//   /** 이 값이 바뀔때 만다 굳이 rerender할 필요가 없기 때문에 useRef을 사용하여 변수로 관리를 함*/\n//   /**useRef는 특정 dom을 선택하고 싶을 때 사용할수있지만, 어떤한 변수를 기억하고 싶을때 ,rerendering되어도 계속 기억된다. */\n//   /**component가 rerender되어도 useRef(4)는 4 이다.*/\n//   const onCreate =useCallback( () => {\n//     const user = {\n//       id: nextId.current,\n//       username,\n//       email,\n\n//     };\n//     // setUsers([...users,user]);\n//     setUsers(users=>users.concat(user));\n//     //setUsers에 등록한 콜백함수의 파라미터 users에서 최신users을 조회하게 된다.\n//     //따라서  deps에 users을 제거해도된다.\n//     // 그렇게 되면 onCreate함수는 username과 email이 바뀔때에만 재렌더링이된다.\n//     /** concat함수를 사용한다. */\n//     setInputs({\n//       username: '',\n//       email: ''\n//     });\n//     console.log(nextId.current)//4\n//     nextId.current += 1; /** useRef의 값을 조회하여 바꾸게 되면 이값도 바뀌게 된다. 이 값이 바뀐다고 component가 rerender되지 않는다.*/\n//   },[username,email]);\n//   //useCallback내부에서 사용하는 상태 또는,props로 받는 값들이 있다면 모두deps에 넣어주어야한다.\n//   //[username,email,users];\n\n//   const onRemove = useCallback(id => {\n//     setUsers(users=>users.filter(user => user.id !== id));\n//   },[]); //onRemove함수는 컴포넌트가 만들어질때 딱한번만 만들고, 렌더링될때만 사용되고 이후에는 계속 전에있는 값만을 재사용한다.\n\n//   const onToggle = useCallback(id => {\n//     setUsers(users=>users.map(\n//       user => user.id === id ? { ...user, active: !user.active } : user\n//     ))\n//   },[]);\n\n//   const count =useMemo(()=>countActiveUsers(users),[users]);//이함수는 users가 바뀔때에만 호출되고 아닐때에는 이전에의 값을 그대로 사용한다.\n//   //useMemo를 사용하면 필요한 연산을 필요할때만 사용할수있다.\n//   //useMomo는 사용한 함수를 재사용할수있다.\n//   return (\n//     <>\n//       <CreateUser\n//         username={username}\n//         email={email}\n//         onChange={onChange}\n//         onCreate={onCreate} />\n//       <UserList users={users} ak={onRemove} onToggle={onToggle} />\n//       <div>활성사용자의 수 : {count}</div>\n//     </>\n//   )\n\n//   /** return (\n//   //   // <Counter />\n//   // ) \n\n//   // return (\n//   //   <Wrapper>\n//   //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n//   //     <Hello color='pink' />\n//   //   </Wrapper>\n\n\n//   // )*/\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}