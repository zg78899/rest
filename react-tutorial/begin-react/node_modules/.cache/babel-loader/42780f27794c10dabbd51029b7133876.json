{"ast":null,"code":"var _jsxFileName = \"/Users/pokeoseu/react-tutorial/begin-react/src/UserList.js\";\nimport React from 'react'; //처음에 이런 방식을 사용하면 계속해서 배열이 늘어나거나 하는 경우에 사용할수없다.\n//따라서 배열의 내장 함수인 map,forEach등을 사용한다.객체 상태의 배열 컴포넌트 형태의 배열로 변형을 해준다.\n\nfunction User({\n  user,\n  onRemove\n}) {\n  const username = user.username,\n        email = user.email,\n        id = user.id;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, username), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"(\", email, \")\"), React.createElement(\"button\", {\n    onClick: () => onRemove(id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"\\uC0AD\\uC81C\"));\n}\n\nfunction UserList({\n  users,\n  onRemove\n}) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, users.map((user, index) => React.createElement(User, {\n    user: user,\n    key: user.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })));\n}\n\nexport default UserList;","map":{"version":3,"sources":["/Users/pokeoseu/react-tutorial/begin-react/src/UserList.js"],"names":["React","User","user","onRemove","username","email","id","UserList","users","map","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AAEA,SAASC,IAAT,CAAc;AAACC,EAAAA,IAAD;AAAMC,EAAAA;AAAN,CAAd,EAA8B;AAAA,QACrBC,QADqB,GACFF,IADE,CACrBE,QADqB;AAAA,QACZC,KADY,GACFH,IADE,CACZG,KADY;AAAA,QACNC,EADM,GACFJ,IADE,CACNI,EADM;AAE5B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,QAAJ,CADJ,EACqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAQC,KAAR,MADrB,EAEI;AAAQ,IAAA,OAAO,EAAE,MAAIF,QAAQ,CAACG,EAAD,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,CADF;AAMD;;AAED,SAASC,QAAT,CAAkB;AAACC,EAAAA,KAAD;AAAOL,EAAAA;AAAP,CAAlB,EAAoC;AAElC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIK,KAAK,CAACC,GAAN,CACE,CAACP,IAAD,EAAMQ,KAAN,KACA,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAER,IAAZ;AACG,IAAA,GAAG,EAAEA,IAAI,CAACI,EADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFJ,CADF;AAcD;;AACD,eAAeC,QAAf","sourcesContent":["import React from 'react';\n//처음에 이런 방식을 사용하면 계속해서 배열이 늘어나거나 하는 경우에 사용할수없다.\n//따라서 배열의 내장 함수인 map,forEach등을 사용한다.객체 상태의 배열 컴포넌트 형태의 배열로 변형을 해준다.\n\nfunction User({user,onRemove}){\n  const {username,email,id}=user;\n  return(\n    <div>\n        <b>{username}</b><span>({email})</span>\n        <button onClick={()=>onRemove(id)}>삭제</button>\n      </div>\n  )\n}\n\nfunction UserList({users,onRemove}) {\n \n  return (\n    <div>\n      {\n        users.map(\n          (user,index)=>(\n          <User user={user}\n             key={user.id}\n             />\n             )\n        )\n      }\n    \n    </div>\n  )\n}\nexport default UserList;\n"]},"metadata":{},"sourceType":"module"}