{"ast":null,"code":"import _defineProperty from \"/Users/pokeoseu/react-tutorial/begin-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/pokeoseu/react-tutorial/begin-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pokeoseu/react-tutorial/begin-react/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { userRef, useState } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction App() {\n  const _useState = useState({\n    username: '',\n    email: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputs = _useState2[0],\n        setInputs = _useState2[1];\n\n  const username = inputs.username,\n        email = inputs.email;\n\n  const onChange = e => {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    setInputs(_objectSpread({}, inputs, {\n      [name]: value\n      /**여기서 name은 username와 email이다. */\n\n    }));\n  };\n\n  const users = [{\n    id: 1,\n    username: 'kim',\n    email: 'abx@naver.com'\n  }, {\n    id: 2,\n    username: 'park',\n    email: 'zxc@gmail.com'\n  }, {\n    id: 3,\n    username: 'lee',\n    email: 'zxczc@gmail.com'\n  }];\n  const nextId = userRef(4);\n  /** 이 값이 바뀔때 만다 굳이 rerender할 필요가 없기 때문에 useRef을 사용하여 변수로 관리를 함*/\n\n  /**useRef는 특정 dom을 선택하고 싶을 때 사용할수있지만, 어떤한 변수를 기억하고 싶을때 ,rerendering되어도 계속 기억된다. */\n\n  /**component가 rerender되어도 useRef(4)는 4 이다.*/\n\n  const onCreate = () => {\n    console.log(nextId.current); //4\n\n    nextId.current += 1;\n    /** useRef의 값을 조회하여 바꾸게 되면 이값도 바뀌게 된다. 이 값이 바뀐다고 component가 rerender되지 않는다.*/\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(CreateUser, {\n    username: username,\n    email: email,\n    onChange: onChange,\n    onCreate: onCreate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(UserList, {\n    users: users,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n  /** return (\n  //   // <Counter />\n  // ) \n    // return (\n  //   <Wrapper>\n  //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n  //     <Hello color='pink' />\n  //   </Wrapper>\n    // )*/\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pokeoseu/react-tutorial/begin-react/src/App.js"],"names":["React","userRef","useState","UserList","CreateUser","App","username","email","inputs","setInputs","onChange","e","target","name","value","users","id","nextId","onCreate","console","log","current"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,QAAzB,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACeH,QAAQ,CAAC;AACnCI,IAAAA,QAAQ,EAAE,EADyB;AAEnCC,IAAAA,KAAK,EAAE;AAF4B,GAAD,CADvB;AAAA;AAAA,QACNC,MADM;AAAA,QACEC,SADF;;AAAA,QAKLH,QALK,GAKeE,MALf,CAKLF,QALK;AAAA,QAKKC,KALL,GAKeC,MALf,CAKKD,KALL;;AAMb,QAAMG,QAAQ,GAAGC,CAAC,IAAI;AAAA,sBACIA,CAAC,CAACC,MADN;AAAA,UACZC,IADY,aACZA,IADY;AAAA,UACNC,KADM,aACNA,KADM;AAEpBL,IAAAA,SAAS,mBACJD,MADI;AAEP,OAACK,IAAD,GAAQC;AAAM;;AAFP,OAAT;AAIH,GANC;;AAOF,QAAMC,KAAK,GAAG,CACZ;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEV,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GADY,EAMZ;AACES,IAAAA,EAAE,EAAE,CADN;AAEEV,IAAAA,QAAQ,EAAE,MAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GANY,EAWZ;AACES,IAAAA,EAAE,EAAE,CADN;AAEEV,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GAXY,CAAd;AAiBA,QAAMU,MAAM,GAAGhB,OAAO,CAAC,CAAD,CAAtB;AAA2B;;AAC3B;;AACA;;AACA,QAAMiB,QAAQ,GAAG,MAAM;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB,EADqB,CACM;;AAC3BJ,IAAAA,MAAM,CAACI,OAAP,IAAkB,CAAlB;AAAqB;AACtB,GAHD;;AAIA,SACE,0CACE,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAEf,QAAtB;AAAgC,IAAA,KAAK,EAAEC,KAAvC;AAA8C,IAAA,QAAQ,EAAEG,QAAxD;AAAkE,IAAA,QAAQ,EAAEQ,QAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEH,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAOE;;;;;;;;;AAYD;;AAED,eAAeV,GAAf","sourcesContent":["import React, { userRef, useState } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: '',\n  });\n  const { username, email } = inputs;\n  const onChange = e => {\n    const { name, value } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value /**여기서 name은 username와 email이다. */ \n    })\n}\nconst users = [\n  {\n    id: 1,\n    username: 'kim',\n    email: 'abx@naver.com'\n  },\n  {\n    id: 2,\n    username: 'park',\n    email: 'zxc@gmail.com'\n  },\n  {\n    id: 3,\n    username: 'lee',\n    email: 'zxczc@gmail.com'\n  }\n];\nconst nextId = userRef(4); /** 이 값이 바뀔때 만다 굳이 rerender할 필요가 없기 때문에 useRef을 사용하여 변수로 관리를 함*/\n/**useRef는 특정 dom을 선택하고 싶을 때 사용할수있지만, 어떤한 변수를 기억하고 싶을때 ,rerendering되어도 계속 기억된다. */\n/**component가 rerender되어도 useRef(4)는 4 이다.*/\nconst onCreate = () => {\n  console.log(nextId.current)//4\n  nextId.current += 1; /** useRef의 값을 조회하여 바꾸게 되면 이값도 바뀌게 된다. 이 값이 바뀐다고 component가 rerender되지 않는다.*/\n}\nreturn (\n  <>\n    <CreateUser username={username} email={email} onChange={onChange} onCreate={onCreate}/>\n    <UserList users={users} />\n  </>\n)\n\n  /** return (\n  //   // <Counter />\n  // ) \n \n  // return (\n  //   <Wrapper>\n  //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n  //     <Hello color='pink' />\n  //   </Wrapper>\n\n\n  // )*/\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}