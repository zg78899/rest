{"ast":null,"code":"var _jsxFileName = \"/Users/pokeoseu/react-tutorial/begin-react/src/App.js\";\nimport React, { userRef } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction App() {\n  const users = [{\n    id: 1,\n    username: 'kim',\n    email: 'abx@naver.com'\n  }, {\n    id: 2,\n    username: 'park',\n    email: 'zxc@gmail.com'\n  }, {\n    id: 3,\n    username: 'lee',\n    email: 'zxczc@gmail.com'\n  }];\n  const nextId = userRef(4);\n  {\n    /** 이 값이 바뀔때 만다 굳이 rerender할 필요가 없기 때문에 useRef을 사용하여 변수로 관리를 함*/\n  }\n  {\n    /**useRef는 특정 dom을 선택하고 싶을 때 사용할수있지만, 어떤한 변수를 기억하고 싶을때 ,rerendering되어도 계속 기억된다. */\n  }\n  {\n    /**component가 rerender되어도 useRef(4)는 4 이다.*/\n  }\n\n  const onCreate = () => {\n    console.log(nextId.current); //4\n\n    nextId.current += 1;\n    {\n      /** useRef의 값을 조회하여 바꾸게 되면 이값도 바뀌게 된다. 이 값이 바뀐다고 component가 rerender되지 않는다.*/\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(CreateUser, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(UserList, {\n    users: users,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }));\n  /** return (\n  //   // <Counter />\n  // ) \n    // return (\n  //   <Wrapper>\n  //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n  //     <Hello color='pink' />\n  //   </Wrapper>\n    // )*/\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pokeoseu/react-tutorial/begin-react/src/App.js"],"names":["React","userRef","UserList","CreateUser","App","users","id","username","email","nextId","onCreate","console","log","current"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,OAAd,QAA2B,OAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,KAAK,GAAG,CACZ;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GADY,EAMZ;AACEF,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,QAAQ,EAAE,MAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GANY,EAWZ;AACEF,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GAXY,CAAd;AAiBA,QAAMC,MAAM,GAAER,OAAO,CAAC,CAAD,CAArB;AAA0B;AAAC;AAAiE;AAC5F;AAAC;AAAmF;AACpF;AAAC;AAA6C;;AAC9C,QAAMS,QAAQ,GAAC,MAAI;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB,EADiB,CACU;;AAC3BJ,IAAAA,MAAM,CAACI,OAAP,IAAkB,CAAlB;AAAqB;AAAC;AAA8E;AACrG,GAHD;;AAIG,SACE,0CACA,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEC,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAER,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,CADF;AAOH;;;;;;;;;AAYD;;AAED,eAAeD,GAAf","sourcesContent":["import React,{userRef}from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction App() {\n  const users = [\n    {\n      id: 1,\n      username: 'kim',\n      email: 'abx@naver.com'\n    },\n    {\n      id: 2,\n      username: 'park',\n      email: 'zxc@gmail.com'\n    },\n    {\n      id: 3,\n      username: 'lee',\n      email: 'zxczc@gmail.com'\n    }\n  ];\n  const nextId= userRef(4); {/** 이 값이 바뀔때 만다 굳이 rerender할 필요가 없기 때문에 useRef을 사용하여 변수로 관리를 함*/}\n  {/**useRef는 특정 dom을 선택하고 싶을 때 사용할수있지만, 어떤한 변수를 기억하고 싶을때 ,rerendering되어도 계속 기억된다. */}\n  {/**component가 rerender되어도 useRef(4)는 4 이다.*/} \n  const onCreate=()=>{\n    console.log(nextId.current)//4\n    nextId.current += 1; {/** useRef의 값을 조회하여 바꾸게 되면 이값도 바뀌게 된다. 이 값이 바뀐다고 component가 rerender되지 않는다.*/}\n  }\n     return (\n       <>\n       <CreateUser />\n        <UserList users={users}/>\n       </>\n   )\n\n  /** return (\n  //   // <Counter />\n  // ) \n \n  // return (\n  //   <Wrapper>\n  //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n  //     <Hello color='pink' />\n  //   </Wrapper>\n\n\n  // )*/\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}