{"ast":null,"code":"var _jsxFileName = \"/Users/pokeoseu/react-tutorial/begin-react/src/UserList.js\";\nimport React from 'react'; //처음에 이런 방식을 사용하면 계속해서 배열이 늘어나거나 하는 경우에 사용할수없다.\n//따라서 배열의 내장 함수인 map,forEach등을 사용한다.객체 상태의 배열 컴포넌트 형태의 배열로 변형을 해준다.\n\nconst User = React.memo(function User({\n  user,\n  onRemove,\n  onToggle\n}) {\n  const username = user.username,\n        email = user.email,\n        id = user.id,\n        active = user.active;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    style: {\n      color: active ? 'green' : 'black',\n      cursor: 'pointer'\n    },\n    onClick: () => onToggle(id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, username), \" \\xA0\", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"(\", email, \")\"), React.createElement(\"button\", {\n    onClick: () => onRemove(id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"\\uC0AD\\uC81C\"));\n}); //React.memo로 함수 전체를 감싸준다. 최적화를 위한 것.\n\nfunction UserList({\n  users,\n  onRemove,\n  onToggle\n}) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, users.map(user => React.createElement(User, {\n    user: user,\n    key: user.id,\n    onRemove: onRemove,\n    onToggle: onToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })));\n}\n\nexport default React.memo(UserList, (prevProps, nextProps) => prevProps.users === nextProps.users); //prevProps의 users와 nextProps의 users가 같다면 재린더링하지않겠다.\n//props가 바뀌지않으면 re 렌더링 방지.\n//연산된값을 재사용하기위해서는 useMemo을 사용하고\n//특정함수를 재사용하기 위해서는 useCallback을 사용하고\n//컴포넌트 렌더링된 결과를 재사용하기위해서는 React.memo을 사용한다.\n//useCallback을 사용하여 함수를 재사용하는것이 성능이 좋아지는 것은 아니다.(개선되는 것이 아니다.)(참고),\n//1.useMemo,useCallback,React.memo\n//2.함수형업데이트,샅애를 업데이트할때 useState,setUsers을 사용\n//3.useReducer을 사용하여 상태를 관리할수있다.","map":{"version":3,"sources":["/Users/pokeoseu/react-tutorial/begin-react/src/UserList.js"],"names":["React","User","memo","user","onRemove","onToggle","username","email","id","active","color","cursor","UserList","users","map","prevProps","nextProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,MAAMC,IAAI,GAACD,KAAK,CAACE,IAAN,CAAW,SAASD,IAAT,CAAc;AAACE,EAAAA,IAAD;AAAMC,EAAAA,QAAN;AAAeC,EAAAA;AAAf,CAAd,EAAuC;AAAA,QACpDC,QADoD,GAC1BH,IAD0B,CACpDG,QADoD;AAAA,QAC3CC,KAD2C,GAC1BJ,IAD0B,CAC3CI,KAD2C;AAAA,QACrCC,EADqC,GAC1BL,IAD0B,CACrCK,EADqC;AAAA,QAClCC,MADkC,GAC1BN,IAD0B,CAClCM,MADkC;AAE3D,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACC,IAAA,KAAK,EAAE;AACNC,MAAAA,KAAK,EAACD,MAAM,GAAC,OAAD,GAAS,OADf;AAENE,MAAAA,MAAM,EAAC;AAFD,KADR;AAKA,IAAA,OAAO,EAAE,MAAIN,QAAQ,CAACG,EAAD,CALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOCF,QAPD,CADJ,WAQyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAQC,KAAR,MARzB,EASI;AAAQ,IAAA,OAAO,EAAE,MAAMH,QAAQ,CAACI,EAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATJ,CADF;AAaD,CAfU,CAAX,C,CAgBA;;AACA,SAASI,QAAT,CAAkB;AAACC,EAAAA,KAAD;AAAOT,EAAAA,QAAP;AAAgBC,EAAAA;AAAhB,CAAlB,EAA6C;AAC3C,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIQ,KAAK,CAACC,GAAN,CACGX,IAAD,IACA,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,IAAZ;AACG,IAAA,GAAG,EAAEA,IAAI,CAACK,EADb;AAEG,IAAA,QAAQ,EAAEJ,QAFb;AAGG,IAAA,QAAQ,EAAEC,QAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFJ,CADF;AAeD;;AACD,eAAeL,KAAK,CAACE,IAAN,CAAWU,QAAX,EAAoB,CAACG,SAAD,EAAWC,SAAX,KAAuBD,SAAS,CAACF,KAAV,KAAoBG,SAAS,CAACH,KAAzE,CAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\n//처음에 이런 방식을 사용하면 계속해서 배열이 늘어나거나 하는 경우에 사용할수없다.\n//따라서 배열의 내장 함수인 map,forEach등을 사용한다.객체 상태의 배열 컴포넌트 형태의 배열로 변형을 해준다.\nconst User=React.memo(function User({user,onRemove,onToggle}){\n  const {username,email,id,active}=user;\n  return(\n    <div>\n        < b\n         style={{\n          color:active?'green':'black',\n          cursor:'pointer'\n        }}\n        onClick={()=>onToggle(id)}\n        >\n        {username}</b> &nbsp;<span>({email})</span>\n        <button onClick={() => onRemove(id)}>삭제</button>\n      </div>\n  )\n})\n//React.memo로 함수 전체를 감싸준다. 최적화를 위한 것.\nfunction UserList({users,onRemove,onToggle}) {\n  return (\n    <div>\n      {\n        users.map(\n          (user)=>(\n          <User user={user}\n             key={user.id}\n             onRemove={onRemove}\n             onToggle={onToggle}\n             />\n             )\n        )\n      }\n    </div>\n  )\n}\nexport default React.memo(UserList,(prevProps,nextProps)=>prevProps.users === nextProps.users);\n//prevProps의 users와 nextProps의 users가 같다면 재린더링하지않겠다.\n//props가 바뀌지않으면 re 렌더링 방지.\n//연산된값을 재사용하기위해서는 useMemo을 사용하고\n//특정함수를 재사용하기 위해서는 useCallback을 사용하고\n//컴포넌트 렌더링된 결과를 재사용하기위해서는 React.memo을 사용한다.\n//useCallback을 사용하여 함수를 재사용하는것이 성능이 좋아지는 것은 아니다.(개선되는 것이 아니다.)(참고),\n//1.useMemo,useCallback,React.memo\n//2.함수형업데이트,샅애를 업데이트할때 useState,setUsers을 사용\n//3.useReducer을 사용하여 상태를 관리할수있다."]},"metadata":{},"sourceType":"module"}