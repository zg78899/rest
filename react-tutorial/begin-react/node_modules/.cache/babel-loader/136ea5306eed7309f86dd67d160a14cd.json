{"ast":null,"code":"import _defineProperty from \"/Users/pokeoseu/react-tutorial/begin-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/pokeoseu/react-tutorial/begin-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pokeoseu/react-tutorial/begin-react/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useRef, useState } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction App() {\n  const _useState = useState({\n    username: '',\n    email: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputs = _useState2[0],\n        setInputs = _useState2[1];\n\n  const username = inputs.username,\n        email = inputs.email;\n\n  const onChange = e => {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    setInputs(_objectSpread({}, inputs, {\n      [name]: value\n      /**여기서 name은 username와 email이다. */\n\n    }));\n  };\n\n  const _useState3 = useState([{\n    id: 1,\n    username: 'kim',\n    email: 'abx@naver.com'\n  }, {\n    id: 2,\n    username: 'park',\n    email: 'zxc@gmail.com'\n  }, {\n    id: 3,\n    username: 'lee',\n    email: 'zxczc@gmail.com'\n  }]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        users = _useState4[0],\n        setUsers = _useState4[1];\n  /**push splice sort등은 원본 배열을 바꾸기 때문에 사용하지 않는것이 좋다. */\n\n  /**spread 연산자를 사용하여 원본 배열을 복사한 후 사용한다. */\n\n\n  const nextId = useRef(4);\n  /** 이 값이 바뀔때 만다 굳이 rerender할 필요가 없기 때문에 useRef을 사용하여 변수로 관리를 함*/\n\n  /**useRef는 특정 dom을 선택하고 싶을 때 사용할수있지만, 어떤한 변수를 기억하고 싶을때 ,rerendering되어도 계속 기억된다. */\n\n  /**component가 rerender되어도 useRef(4)는 4 이다.*/\n\n  const onCreate = () => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    }; // setUsers([...users,user]);\n\n    setUsers(users.concat(user));\n    /** concat함수를 사용한다. */\n\n    setInputs({\n      username: '',\n      email: ''\n    });\n    console.log(nextId.current); //4\n\n    nextId.current += 1;\n    /** useRef의 값을 조회하여 바꾸게 되면 이값도 바뀌게 된다. 이 값이 바뀐다고 component가 rerender되지 않는다.*/\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(CreateUser, {\n    username: username,\n    email: email,\n    onChange: onChange,\n    onCreate: onCreate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(UserList, {\n    users: users,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }));\n  /** return (\n  //   // <Counter />\n  // ) \n    // return (\n  //   <Wrapper>\n  //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n  //     <Hello color='pink' />\n  //   </Wrapper>\n    // )*/\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pokeoseu/react-tutorial/begin-react/src/App.js"],"names":["React","useRef","useState","UserList","CreateUser","App","username","email","inputs","setInputs","onChange","e","target","name","value","id","users","setUsers","nextId","onCreate","user","current","concat","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACeH,QAAQ,CAAC;AACnCI,IAAAA,QAAQ,EAAE,EADyB;AAEnCC,IAAAA,KAAK,EAAE;AAF4B,GAAD,CADvB;AAAA;AAAA,QACNC,MADM;AAAA,QACEC,SADF;;AAAA,QAKLH,QALK,GAKeE,MALf,CAKLF,QALK;AAAA,QAKKC,KALL,GAKeC,MALf,CAKKD,KALL;;AAMb,QAAMG,QAAQ,GAAGC,CAAC,IAAI;AAAA,sBACIA,CAAC,CAACC,MADN;AAAA,UACZC,IADY,aACZA,IADY;AAAA,UACNC,KADM,aACNA,KADM;AAEpBL,IAAAA,SAAS,mBACJD,MADI;AAEP,OAACK,IAAD,GAAQC;AAAM;;AAFP,OAAT;AAIH,GANC;;AANa,qBAaSZ,QAAQ,CAAC,CAC/B;AACEa,IAAAA,EAAE,EAAE,CADN;AAEET,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GAD+B,EAM/B;AACEQ,IAAAA,EAAE,EAAE,CADN;AAEET,IAAAA,QAAQ,EAAE,MAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GAN+B,EAW/B;AACEQ,IAAAA,EAAE,EAAE,CADN;AAEET,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GAX+B,CAAD,CAbjB;AAAA;AAAA,QAaRS,KAbQ;AAAA,QAaFC,QAbE;AA+Bf;;AACA;;;AAGA,QAAMC,MAAM,GAAGjB,MAAM,CAAC,CAAD,CAArB;AACA;;AACA;;AACA;;AACA,QAAMkB,QAAQ,GAAG,MAAM;AACrB,UAAMC,IAAI,GAAC;AACTL,MAAAA,EAAE,EAACG,MAAM,CAACG,OADD;AAETf,MAAAA,QAFS;AAGTC,MAAAA;AAHS,KAAX,CADqB,CAOrB;;AACAU,IAAAA,QAAQ,CAACD,KAAK,CAACM,MAAN,CAAaF,IAAb,CAAD,CAAR;AAA6B;;AAC7BX,IAAAA,SAAS,CAAC;AACRH,MAAAA,QAAQ,EAAC,EADD;AAERC,MAAAA,KAAK,EAAC;AAFE,KAAD,CAAT;AAIAgB,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACG,OAAnB,EAbqB,CAaM;;AAC3BH,IAAAA,MAAM,CAACG,OAAP,IAAkB,CAAlB;AAAqB;AACtB,GAfD;;AAgBA,SACE,0CACE,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAEf,QAAtB;AAAgC,IAAA,KAAK,EAAEC,KAAvC;AAA8C,IAAA,QAAQ,EAAEG,QAAxD;AAAkE,IAAA,QAAQ,EAAES,QAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEH,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAOE;;;;;;;;;AAYD;;AAED,eAAeX,GAAf","sourcesContent":["import React, { useRef, useState } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: '',\n  });\n  const { username, email } = inputs;\n  const onChange = e => {\n    const { name, value } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value /**여기서 name은 username와 email이다. */ \n    })\n}\nconst [users,setUsers] =useState([\n  {\n    id: 1,\n    username: 'kim',\n    email: 'abx@naver.com'\n  },\n  {\n    id: 2,\n    username: 'park',\n    email: 'zxc@gmail.com'\n  },\n  {\n    id: 3,\n    username: 'lee',\n    email: 'zxczc@gmail.com'\n  }\n]);\n\n/**push splice sort등은 원본 배열을 바꾸기 때문에 사용하지 않는것이 좋다. */\n/**spread 연산자를 사용하여 원본 배열을 복사한 후 사용한다. */\n\n\nconst nextId = useRef(4); \n/** 이 값이 바뀔때 만다 굳이 rerender할 필요가 없기 때문에 useRef을 사용하여 변수로 관리를 함*/\n/**useRef는 특정 dom을 선택하고 싶을 때 사용할수있지만, 어떤한 변수를 기억하고 싶을때 ,rerendering되어도 계속 기억된다. */\n/**component가 rerender되어도 useRef(4)는 4 이다.*/\nconst onCreate = () => {\n  const user={\n    id:nextId.current,\n    username,\n    email,\n\n  };\n  // setUsers([...users,user]);\n  setUsers(users.concat(user));/** concat함수를 사용한다. */\n  setInputs({\n    username:'',\n    email:''\n  });\n  console.log(nextId.current)//4\n  nextId.current += 1; /** useRef의 값을 조회하여 바꾸게 되면 이값도 바뀌게 된다. 이 값이 바뀐다고 component가 rerender되지 않는다.*/\n}\nreturn (\n  <>\n    <CreateUser username={username} email={email} onChange={onChange} onCreate={onCreate}/>\n    <UserList users={users} />\n  </>\n)\n\n  /** return (\n  //   // <Counter />\n  // ) \n \n  // return (\n  //   <Wrapper>\n  //     <Hello name='react' color='red' isSpecial={true}/>// 기본값은 true이다.\n  //     <Hello color='pink' />\n  //   </Wrapper>\n\n\n  // )*/\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}