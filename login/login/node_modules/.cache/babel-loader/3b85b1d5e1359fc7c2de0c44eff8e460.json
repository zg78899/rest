{"ast":null,"code":"import _slicedToArray from \"/Users/pokeoseu/Desktop/React-Self-Study/login/login/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pokeoseu/Desktop/React-Self-Study/login/login/src/component/SignUp.jsx\";\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { signUp } from '../lib/api';\n\nconst SignUp = props => {\n  const _useForm = useForm(),\n        handleSubmit = _useForm.handleSubmit,\n        register = _useForm.register,\n        errors = _useForm.errors,\n        watch = _useForm.watch;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        alreadyExist = _useState2[0],\n        setAlreadyExist = _useState2[1];\n\n  const onSubmit = async values => {\n    const _ref = await signUp(values),\n          success = _ref.success,\n          msg = _ref.msg;\n\n    if (success) {\n      props.history.push('/signin');\n    } else if (msg === 'Username already exists.') {\n      setAlreadyExist(true);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"userid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Email:\", React.createElement(\"input\", {\n    id: \"userid\",\n    name: \"username\",\n    ref: register({\n      required: 'Required',\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n        message: \"invalid email address\"\n      }\n    }),\n    placeholder: \"\\uC774\\uBA54\\uC77C\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })), errors.username && errors.username.message, alreadyExist && '이미존재하는 아이디입니다.', React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"password1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"password:\", React.createElement(\"input\", {\n    id: \"password1\",\n    name: \"password1\",\n    type: \"password\",\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n    ref: register({\n      required: 'Required'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"password2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"passsword confirm:\", React.createElement(\"input\", {\n    id: \"password2\",\n    name: \"password2\",\n    type: \"password\",\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uC744 \\uD655\\uC778\\uD558\\uC138\\uC694\",\n    ref: register({\n      required: 'Required',\n      validate: value => {\n        return value === watch('password1');\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Sign Up\"), errors.password2 && '비밀번호가 일치하지않습니다.'));\n};\n\nexport default SignUp;","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/login/login/src/component/SignUp.jsx"],"names":["React","useState","useForm","signUp","SignUp","props","handleSubmit","register","errors","watch","alreadyExist","setAlreadyExist","onSubmit","values","success","msg","history","push","required","pattern","value","message","username","validate","password2"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport {signUp} from '../lib/api';\n\nconst SignUp = (props) => {\n  const {handleSubmit, register, errors, watch} = useForm();\n  const [alreadyExist, setAlreadyExist] = useState(false);\n\n  const onSubmit = async values => {\n    const { success, msg } = await signUp(values);\n    if (success) {\n      props.history.push('/signin');\n\n    } else if (msg === 'Username already exists.') {\n      setAlreadyExist(true);\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"userid\">\n          Email:\n      <input\n            id=\"userid\"\n            name=\"username\"\n            ref={register({\n              required: 'Required',\n              pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                message: \"invalid email address\"\n              }\n            })}\n            placeholder=\"이메일을 입력해주세요\" />\n        </label>\n        {errors.username && errors.username.message}\n        {alreadyExist && '이미존재하는 아이디입니다.'}\n        <br />\n        <label htmlFor=\"password1\">\n          password:\n        <input\n            id=\"password1\"\n            name=\"password1\"\n            type=\"password\"\n            placeholder=\"비밀번호를 입력해주세요\"\n            ref={register({\n              required: 'Required',\n            })}\n          />\n        </label>\n        <br />\n        <label htmlFor=\"password2\">\n          passsword confirm:\n        <input\n            id=\"password2\"\n            name=\"password2\"\n            type=\"password\"\n            placeholder=\"비밀번호을 확인하세요\"\n            ref={register({\n              required: 'Required',\n              validate: (value) => {\n                return value === watch('password1');\n              }\n            })}\n          />\n        </label>\n        <br />\n        <button type=\"submit\">Sign Up</button>\n        {errors.password2 && '비밀번호가 일치하지않습니다.'}\n      </form>\n    </div>\n  )\n\n}\nexport default SignUp;\n"]},"metadata":{},"sourceType":"module"}