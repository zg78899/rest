{"ast":null,"code":"var _jsxFileName = \"/Users/pokeoseu/learn-redux/learn-redux/src/containers/CounterContainer.js\";\nimport React from 'react';\nimport Counter from '../components/Counter';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux'; //상태를 조회할때 useSelector을 사용한다.//usedispatch는 dispatch 할때 사용하는 hooks\n\nimport { increase, decrease, setDiff } from '../modules/counter';\n\nfunction CounterContainer() {\n  const _useSelector = useSelector(state => ({\n    //store.getState하는 값들이 state의 상태로 들어간다. state는 redux의 현재 상태\n    //useSelector의 결과물은 number와diff을 선택한 객체가 된다.\n    number: state.counter.number,\n    diff: state.counter.diff //selector엣 매번 새롭게 렌더링한다.useselect 을 조회할때마다 하나의 상태만을 조회한다.\n\n  }), shallowEqual //최적화\n  // (left,right)=>{\n  //   return left.diff === right.diff && left.number == right.number\n  ),\n        number = _useSelector.number,\n        diff = _useSelector.diff; // const number=useSelector(state=>state.counter.number);//최적화를 위해 useSelector가 하나의 상태만을 조회하게 만들어 줬다.\n  // const diff=useSelector(state=>state.counter.diff);\n\n\n  const dispatch = useDispatch();\n\n  const onIncrease = () => dispatch(increase()); //액션 생성 함수들이 호출이 되면 dispatch된다.\n\n\n  const onDecrease = () => dispatch(decrease());\n\n  const onSetDiff = diff => dispatch(setDiff(diff)); //diff을 파라미터로 받아와서 dispatch해준다. setDiff(diff)을 받아서 파라미터로 받은 diff을 넣어준다.\n  //Counter에게 하나하나 전달해준다.\n\n\n  return React.createElement(Counter, {\n    number: number,\n    diff: diff,\n    onIncrease: onIncrease,\n    onDecrease: onDecrease,\n    onSetDiff: onSetDiff,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n}\n\nexport default CounterContainer; //컨테이너 컴포넌트에서는 상태관리를 중점적으로 한다.\n// 컨테이넌 컴포넌트에서 리덧스 스토어의 상태를 불러오고\n// 함수가 호출되면 액션 디스패치하는 방식","map":{"version":3,"sources":["/Users/pokeoseu/learn-redux/learn-redux/src/containers/CounterContainer.js"],"names":["React","Counter","useSelector","useDispatch","shallowEqual","increase","decrease","setDiff","CounterContainer","state","number","counter","diff","dispatch","onIncrease","onDecrease","onSetDiff"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,YAAnC,QAAsD,aAAtD,C,CAAoE;;AACpE,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,OAA7B,QAA4C,oBAA5C;;AAEA,SAASC,gBAAT,GAA4B;AAAA,uBACDN,WAAW,CAClCO,KAAK,KAAK;AAAC;AACX;AACAC,IAAAA,MAAM,EAAED,KAAK,CAACE,OAAN,CAAcD,MAFZ;AAGVE,IAAAA,IAAI,EAAEH,KAAK,CAACE,OAAN,CAAcC,IAHV,CAIV;;AAJU,GAAL,CAD6B,EAOpCR,YAPoC,CAOxB;AACZ;AACA;AAToC,GADV;AAAA,QAClBM,MADkB,gBAClBA,MADkB;AAAA,QACVE,IADU,gBACVA,IADU,EAY1B;AACA;;;AAEA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AAEA,QAAMW,UAAU,GAAG,MAAMD,QAAQ,CAACR,QAAQ,EAAT,CAAjC,CAjB0B,CAiBoB;;;AAC9C,QAAMU,UAAU,GAAG,MAAMF,QAAQ,CAACP,QAAQ,EAAT,CAAjC;;AACA,QAAMU,SAAS,GAAGJ,IAAI,IAAIC,QAAQ,CAACN,OAAO,CAACK,IAAD,CAAR,CAAlC,CAnB0B,CAmBwB;AAElD;;;AACA,SAEE,oBAAC,OAAD;AACE,IAAA,MAAM,EAAEF,MADV;AAEE,IAAA,IAAI,EAAEE,IAFR;AAGE,IAAA,UAAU,EAAEE,UAHd;AAIE,IAAA,UAAU,EAAEC,UAJd;AAKE,IAAA,SAAS,EAAEC,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF;AAUD;;AACD,eAAeR,gBAAf,C,CACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport Counter from '../components/Counter';\nimport { useSelector, useDispatch ,shallowEqual} from 'react-redux';//상태를 조회할때 useSelector을 사용한다.//usedispatch는 dispatch 할때 사용하는 hooks\nimport { increase, decrease, setDiff } from '../modules/counter';\n\nfunction CounterContainer() {\n  const { number, diff } = useSelector(\n    state => ({//store.getState하는 값들이 state의 상태로 들어간다. state는 redux의 현재 상태\n    //useSelector의 결과물은 number와diff을 선택한 객체가 된다.\n    number: state.counter.number,\n    diff: state.counter.diff\n    //selector엣 매번 새롭게 렌더링한다.useselect 을 조회할때마다 하나의 상태만을 조회한다.\n  }),\n  shallowEqual//최적화\n  // (left,right)=>{\n  //   return left.diff === right.diff && left.number == right.number\n  );\n  // const number=useSelector(state=>state.counter.number);//최적화를 위해 useSelector가 하나의 상태만을 조회하게 만들어 줬다.\n  // const diff=useSelector(state=>state.counter.diff);\n\n  const dispatch = useDispatch();\n\n  const onIncrease = () => dispatch(increase());//액션 생성 함수들이 호출이 되면 dispatch된다.\n  const onDecrease = () => dispatch(decrease());\n  const onSetDiff = diff => dispatch(setDiff(diff));//diff을 파라미터로 받아와서 dispatch해준다. setDiff(diff)을 받아서 파라미터로 받은 diff을 넣어준다.\n\n  //Counter에게 하나하나 전달해준다.\n  return (\n    \n    <Counter\n      number={number}\n      diff={diff}\n      onIncrease={onIncrease}\n      onDecrease={onDecrease}\n      onSetDiff={onSetDiff}\n    />\n  )\n}\nexport default CounterContainer;\n//컨테이너 컴포넌트에서는 상태관리를 중점적으로 한다.\n// 컨테이넌 컴포넌트에서 리덧스 스토어의 상태를 불러오고\n// 함수가 호출되면 액션 디스패치하는 방식"]},"metadata":{},"sourceType":"module"}