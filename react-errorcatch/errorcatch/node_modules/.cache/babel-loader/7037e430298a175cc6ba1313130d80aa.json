{"ast":null,"code":"var _jsxFileName = \"/Users/pokeoseu/Desktop/React-Self-Study/react-errorcatch/errorcatch/src/ErrorBoundary.js\";\nimport React, { Component } from 'react';\nimport * as Sentry from '@sentry/browser';\n\nclass ErrorBoundary extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: false\n    };\n  }\n\n  //에러가 발생하는 상황에 이함수가 호출이 된다.\n  //componentDidCatch의 역할은 아직 발견하지못한 error가 있을때 사용자에게 에러가 발생했다는 것을 보여줄수있다.\n  componentDidCatch(error, info) {\n    //파라미터로 첫번째 error 두번째 어디에서 에러가 빌생했는지를 보여준다.\n    console.log('에러가 발생했습니다.');\n    console.log({\n      error,\n      info\n    });\n    this.setState({\n      error: true //state의 error의 값을 turef로 바꿔준다.\n\n    });\n\n    if (process.env.NODE_ENV === 'production') {\n      Sentry.captureException(error, {\n        extra: info\n      });\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"\\uC5D0\\uB7EC\\uBC1C\\uC0DD!!1\");\n    }\n\n    return this.props.children;\n  }\n\n}\n\nexport default ErrorBoundary;","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/react-errorcatch/errorcatch/src/ErrorBoundary.js"],"names":["React","Component","Sentry","ErrorBoundary","state","error","componentDidCatch","info","console","log","setState","process","env","NODE_ENV","captureException","extra","render","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;;AAEA,MAAMC,aAAN,SAA4BF,SAA5B,CAAqC;AAAA;AAAA;AAAA,SACnCG,KADmC,GAC7B;AACLC,MAAAA,KAAK,EAAC;AADD,KAD6B;AAAA;;AAInC;AACA;AACAC,EAAAA,iBAAiB,CAACD,KAAD,EAAOE,IAAP,EAAY;AAAC;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY;AACVJ,MAAAA,KADU;AAEVE,MAAAA;AAFU,KAAZ;AAKA,SAAKG,QAAL,CAAc;AACZL,MAAAA,KAAK,EAAC,IADM,CACF;;AADE,KAAd;;AAGA,QAAGM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA5B,EAAyC;AACvCX,MAAAA,MAAM,CAACY,gBAAP,CAAwBT,KAAxB,EAA8B;AAACU,QAAAA,KAAK,EAACR;AAAP,OAA9B;AACD;AAEF;;AACDS,EAAAA,MAAM,GAAE;AACN,QAAG,KAAKZ,KAAL,CAAWC,KAAd,EAAoB;AAClB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAP;AACD;;AACD,WAAO,KAAKY,KAAL,CAAWC,QAAlB;AACD;;AA1BkC;;AA6BrC,eAAef,aAAf","sourcesContent":["import React,{Component} from 'react'\nimport * as Sentry from '@sentry/browser';\n\nclass ErrorBoundary extends Component{\n  state={\n   error:false\n  }\n  //에러가 발생하는 상황에 이함수가 호출이 된다.\n  //componentDidCatch의 역할은 아직 발견하지못한 error가 있을때 사용자에게 에러가 발생했다는 것을 보여줄수있다.\n  componentDidCatch(error,info){//파라미터로 첫번째 error 두번째 어디에서 에러가 빌생했는지를 보여준다.\n    console.log('에러가 발생했습니다.');\n    console.log({\n      error,\n      info\n    });\n\n    this.setState({\n      error:true//state의 error의 값을 turef로 바꿔준다.\n    })\n    if(process.env.NODE_ENV === 'production'){\n      Sentry.captureException(error,{extra:info});\n    }\n\n  }\n  render(){\n    if(this.state.error){\n      return <h1>에러발생!!1</h1>\n    }\n    return this.props.children;\n  }\n\n}\nexport default ErrorBoundary;"]},"metadata":{},"sourceType":"module"}