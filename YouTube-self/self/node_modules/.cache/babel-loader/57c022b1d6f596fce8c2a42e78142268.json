{"ast":null,"code":"var _jsxFileName = \"/Users/pokeoseu/Desktop/React-Self-Study/YouTube-self/self/src/Main.js\";\nimport React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Nav from './component/Nav/Nav';\nimport SearchBar from './component/SearchBar/SearchBar';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport uuid from 'uuid';\nimport { spinner } from './component/images/';\nimport VideoList from './component/VideoList/VideoList';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { updateQuery } from './actions';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      videos: [],\n      // query: this.props.query,\n      selectedVideos: null,\n      nextPageToke: null\n    };\n    Object.getOwnPropertyNames(Main.prototype).forEach(key => this[key] = this[key].bind(this));\n    this.defaultState = this.state;\n  }\n\n  async getYoutubeData(query) {\n    if (!query) {\n      setTimeout(() => {\n        this.props.history.push(`/results?search_query=${query}`);\n      }, 0);\n      this.setState(this.defaultState);\n      return;\n    }\n\n    if (this.state.query !== query) {\n      this.setState(this.defaultState);\n      setTimeout(() => {\n        this.props.history.push(`/results?search_query=${query}`);\n      }, 0);\n    }\n\n    const nextPageToken = this.state.nextPageToken;\n    const params = {\n      key: \"AIzaSyDFjSfrtwzoi9XHarGiQb7RB2x2UEayGIo\",\n      q: query,\n      part: 'snippet',\n      maxResults: 10,\n      pageToken: nextPageToken\n    };\n\n    const _ref = await axios.get(`https://www.googleapis.com/youtube/v3/search`, {\n      params\n    }),\n          data = _ref.data;\n\n    this.setState({\n      videos: [...this.state.videos, ...data.items],\n      // query,\n      nextPageToken: data.nextPageToken\n    });\n    this.props.updateQuery(query);\n  }\n\n  async componentDidMount() {\n    const props = this.props;\n\n    if (props.location) {\n      const _qs$parse = qs.parse(props.location.search),\n            search_query = _qs$parse.search_query;\n\n      if (search_query) this.getYoutubeData(search_query || '');\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(SearchBar, {\n      onSearchVideos: this.getYoutubeData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(InfiniteScroll, {\n      loadMore: () => this.getYoutubeData(this.props.query),\n      hasMore: !!this.state.nextPageToke && !this.state.selectedVideos,\n      loader: React.createElement(\"div\", {\n        key: uuid.v4(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: spinner,\n        alt: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(VideoList, Object.assign({}, this.state, {\n      onVideoSelect: selectedVideos => this.props.history.push(`/watch?v=${selectedVideos}`),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    query: state.videos.query\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    updateQuery\n  }, dispatch);\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/YouTube-self/self/src/Main.js"],"names":["React","axios","Nav","SearchBar","InfiniteScroll","uuid","spinner","VideoList","qs","withRouter","connect","bindActionCreators","updateQuery","Main","Component","constructor","props","state","videos","selectedVideos","nextPageToke","Object","getOwnPropertyNames","prototype","forEach","key","bind","defaultState","getYoutubeData","query","setTimeout","history","push","setState","nextPageToken","params","q","part","maxResults","pageToken","get","data","items","componentDidMount","location","parse","search","search_query","render","v4","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Nav from './component/Nav/Nav';\nimport SearchBar from './component/SearchBar/SearchBar';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport uuid from 'uuid';\nimport {spinner} from './component/images/'\nimport VideoList from './component/VideoList/VideoList';\nimport qs from 'qs';\nimport {withRouter} from 'react-router-dom';\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateQuery} from './actions';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      videos: [],\n      // query: this.props.query,\n      selectedVideos: null,\n      nextPageToke: null\n    }\n    Object.getOwnPropertyNames(Main.prototype).forEach(key => this[key] = this[key].bind(this));\n    this.defaultState = this.state;\n  }\n  async getYoutubeData(query) {\n    if (!query) {\n      setTimeout(()=>{\n        this.props.history.push(`/results?search_query=${query}`)\n      },0)\n      this.setState(this.defaultState);\n      return\n    }\n    if (this.state.query !== query) {\n      this.setState(this.defaultState);\n      setTimeout(()=>{\n        this.props.history.push(`/results?search_query=${query}`)\n      },0);\n    }\n    const { nextPageToken } = this.state;\n\n    const params = {\n      key: \"AIzaSyDFjSfrtwzoi9XHarGiQb7RB2x2UEayGIo\",\n      q: query,\n      part: 'snippet',\n      maxResults:10,\n      pageToken: nextPageToken\n    }\n    const { data } = await axios.get(`https://www.googleapis.com/youtube/v3/search`, { params });\n    this.setState({\n      videos: [ ...this.state.videos, ...data.items ],\n      // query,\n      nextPageToken: data.nextPageToken\n    });\n    this.props.updateQuery(query);\n  }\n  async componentDidMount() {\n    const {props}=this;\n    if(props.location){\n\n      const {search_query}=qs.parse(props.location.search);\n      if(search_query)this.getYoutubeData( search_query || '' );\n\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Nav>\n          <SearchBar onSearchVideos={this.getYoutubeData} />\n        </Nav>\n\n        <InfiniteScroll\n          loadMore={() => this.getYoutubeData(this.props.query)}\n          hasMore={!!this.state.nextPageToke && !this.state.selectedVideos}\n          loader={\n            <div key={uuid.v4()} >\n              <img src={spinner} alt=\"loading\"/>\n            </div>\n          }\n            >\n              <VideoList\n                {...this.state} onVideoSelect={selectedVideos=>this.props.history.push(`/watch?v=${selectedVideos}`)}\n              />\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\nfunction mapStateToProps(state){\n  return {\n    query:state.videos.query\n  }\n}\nfunction mapDispatchToProps(dispatch){\n  return bindActionCreators({updateQuery},dispatch)\n}\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Main));\n"]},"metadata":{},"sourceType":"module"}