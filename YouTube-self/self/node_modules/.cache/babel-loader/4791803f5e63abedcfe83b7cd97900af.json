{"ast":null,"code":"import _objectSpread from \"/Users/pokeoseu/Desktop/React-Self-Study/YouTube-self/self/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { UPDATE_QUERY, LIKE, DISLIKE, COMMENT, DELETE } from '../actions';\nconst INITAL_STATE = {\n  query: '',\n  data: {}\n};\nexport default function videos(state = INITAL_STATE, action) {\n  switch (action.type) {\n    case UPDATE_QUERY:\n      return _objectSpread({}, state, {\n        query: action.query\n      });\n\n    case LIKE:\n      const video = state.data[action.id];\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, state.data, {\n          [action.id]: _objectSpread({}, video, {\n            count: video && video.count ? video.count + 1 : 1\n          })\n        })\n      });\n\n    case DISLIKE:\n      const _data = state.data[action.id];\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, state.data, {\n          [action.id]: _objectSpread({}, _data, {\n            dislike: _data && _data.dislike ? _data.dislike + 1 : 1\n          })\n        })\n      });\n\n    case COMMENT:\n      const _comments = state.data[action.id];\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, state.data, {\n          [action.id]: _objectSpread({}, _comments, {\n            comments: _comments && _comments.comments ? [{\n              text: action.val\n            }, ..._comments.comments] : [{\n              text: action.val\n            }]\n          })\n        })\n      });\n\n    case DELETE:\n      const comments_del = state.data[action.id];\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, state.data, {\n          [action.id]: {\n            comments: comments_del && comments_del.comments.filter(comment => {\n              return comment.cid !== action.commentId;\n            })\n          }\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/YouTube-self/self/src/reducers/videos.js"],"names":["UPDATE_QUERY","LIKE","DISLIKE","COMMENT","DELETE","INITAL_STATE","query","data","videos","state","action","type","video","id","count","_data","dislike","_comments","comments","text","val","comments_del","filter","comment","cid","commentId"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,OAAtC,EAA+CC,MAA/C,QAA6D,YAA7D;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,eAAe,SAASC,MAAT,CAAgBC,KAAK,GAAGJ,YAAxB,EAAsCK,MAAtC,EAA8C;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,YAAL;AACE,+BACKS,KADL;AAEEH,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAFhB;;AAKF,SAAKL,IAAL;AACE,YAAMW,KAAK,GAAGH,KAAK,CAACF,IAAN,CAAWG,MAAM,CAACG,EAAlB,CAAd;AACA,+BACKJ,KADL;AAEEF,QAAAA,IAAI,oBACCE,KAAK,CAACF,IADP;AAEF,WAACG,MAAM,CAACG,EAAR,qBACKD,KADL;AAEEE,YAAAA,KAAK,EAAEF,KAAK,IAAIA,KAAK,CAACE,KAAf,GACNF,KAAK,CAACE,KAAN,GAAc,CADR,GACY;AAHrB;AAFE;AAFN;;AAYF,SAAKZ,OAAL;AACE,YAAMa,KAAK,GAAGN,KAAK,CAACF,IAAN,CAAWG,MAAM,CAACG,EAAlB,CAAd;AACA,+BACKJ,KADL;AAEEF,QAAAA,IAAI,oBACCE,KAAK,CAACF,IADP;AAEF,WAACG,MAAM,CAACG,EAAR,qBACKE,KADL;AAEEC,YAAAA,OAAO,EAAED,KAAK,IAAIA,KAAK,CAACC,OAAf,GACRD,KAAK,CAACC,OAAN,GAAgB,CADR,GACY;AAHvB;AAFE;AAFN;;AAWA,SAAKb,OAAL;AACE,YAAMc,SAAS,GAACR,KAAK,CAACF,IAAN,CAAWG,MAAM,CAACG,EAAlB,CAAhB;AACA,+BACKJ,KADL;AAEEF,QAAAA,IAAI,oBACCE,KAAK,CAACF,IADP;AAEF,WAACG,MAAM,CAACG,EAAR,qBACKI,SADL;AAEEC,YAAAA,QAAQ,EAAED,SAAS,IAAIA,SAAS,CAACC,QAAvB,GAEV,CAAC;AAACC,cAAAA,IAAI,EAACT,MAAM,CAACU;AAAb,aAAD,EACA,GAAGH,SAAS,CAACC,QADb,CAFU,GAKV,CAAC;AAACC,cAAAA,IAAI,EAACT,MAAM,CAACU;AAAb,aAAD;AAPF;AAFE;AAFN;;AAeA,SAAKhB,MAAL;AACE,YAAMiB,YAAY,GAACZ,KAAK,CAACF,IAAN,CAAWG,MAAM,CAACG,EAAlB,CAAnB;AACA,+BACKJ,KADL;AAEEF,QAAAA,IAAI,oBACCE,KAAK,CAACF,IADP;AAEF,WAACG,MAAM,CAACG,EAAR,GAAY;AACZK,YAAAA,QAAQ,EAAEG,YAAY,IAAIA,YAAY,CAACH,QAAb,CAAsBI,MAAtB,CAA6BC,OAAO,IAAE;AAC9D,qBAAOA,OAAO,CAACC,GAAR,KAAgBd,MAAM,CAACe,SAA9B;AACD,aAFyB;AADd;AAFV;AAFN;;AAaN;AACE,aAAOhB,KAAP;AAnEJ;AAqED","sourcesContent":["import { UPDATE_QUERY, LIKE, DISLIKE, COMMENT, DELETE } from '../actions';\n\n\nconst INITAL_STATE = {\n  query: '',\n  data: {}\n\n}\nexport default function videos(state = INITAL_STATE, action) {\n  switch (action.type) {\n    case UPDATE_QUERY:\n      return {\n        ...state,\n        query: action.query\n      }\n\n    case LIKE:\n      const video = state.data[action.id];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.id]: {\n            ...video,\n            count: video && video.count ?\n             video.count + 1 : 1\n          }\n        }\n      }\n\n    case DISLIKE:\n      const _data = state.data[action.id];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.id]: {\n            ..._data,\n            dislike: _data && _data.dislike ?\n             _data.dislike + 1 : 1\n          }\n        }\n      }\n      case COMMENT:\n        const _comments=state.data[action.id];\n        return {\n          ...state,\n          data:{\n            ...state.data,\n            [action.id]:{\n              ..._comments,\n              comments: _comments && _comments.comments\n              ?\n              [{text:action.val},\n              ..._comments.comments,]\n              :\n              [{text:action.val}]\n            }\n          }\n        }\n        case DELETE:\n          const comments_del=state.data[action.id];\n          return {\n            ...state,\n            data:{\n              ...state.data,\n              [action.id]:{\n              comments: comments_del && comments_del.comments.filter(comment=>{\n                return comment.cid !== action.commentId\n              })\n              }\n            }\n\n          }\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}