{"ast":null,"code":"var _jsxFileName = \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/User1.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { useAsync } from 'react-async';\n\nasync function getUser({\n  id\n}) {\n  const response = await axios.get(`http://jsonplaceholder.typicode.com/users/${id}`);\n  return response.data;\n}\n\nfunction User({\n  id\n}) {\n  //id의 값을 props로 받아오겠다.\n  const _useAsync = useAsync({\n    promiseFn: getUser,\n    //프로미스를 반환하는 함수인 getUser을 넣는다.\n    id,\n    watch: id //컴포넌트가 처음 작동할때는 getUserd에 id를 넣어서 작동한다.만약에 id값이 바뀌면 다시 useAsync을 실행하겠다.\n    //사실상 우리가 deps에 값을 넣었던 것과 같은 것이다.\n\n  }),\n        user = _useAsync.data,\n        error = _useAsync.error,\n        isLoading = _useAsync.isLoading; //id값이 바뀔때 마다 이함수를 호출하겠다.\n\n\n  if (isLoading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"\\uB85C\\uB529\\uC911...\");\n  if (error) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"\\uC5D0\\uB7EC \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4.\");\n  if (!user) return null;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, user.username), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Email : \"), user.email));\n}\n\nexport default User;","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/User1.js"],"names":["React","axios","useAsync","getUser","id","response","get","data","User","promiseFn","watch","user","error","isLoading","username","email"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,aAAvB;;AAEA,eAAeC,OAAf,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAA4B;AAC1B,QAAMC,QAAQ,GAAC,MAAMJ,KAAK,CAACK,GAAN,CAAW,6CAA4CF,EAAG,EAA1D,CAArB;AACA,SAAOC,QAAQ,CAACE,IAAhB;AACD;;AAID,SAASC,IAAT,CAAc;AAACJ,EAAAA;AAAD,CAAd,EAAoB;AAAC;AAAD,oBAKhBF,QAAQ,CAAC;AACTO,IAAAA,SAAS,EAACN,OADD;AACS;AAClBC,IAAAA,EAFS;AAGTM,IAAAA,KAAK,EAACN,EAHG,CAGA;AACT;;AAJS,GAAD,CALQ;AAAA,QAEXO,IAFW,aAEhBJ,IAFgB;AAAA,QAGhBK,KAHgB,aAGhBA,KAHgB;AAAA,QAIhBC,SAJgB,aAIhBA,SAJgB,EAYf;;;AAEH,MAAIA,SAAJ,EAAe,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACf,MAAID,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAAP;AACX,MAAI,CAACD,IAAL,EAAW,OAAO,IAAP;AAGX,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,CAACG,QAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,EAAmBH,IAAI,CAACI,KAAxB,CAFF,CADF;AAMD;;AACD,eAAeP,IAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport {useAsync} from 'react-async';\n\nasync function getUser({id}){\n  const response=await axios.get(`http://jsonplaceholder.typicode.com/users/${id}`);\n  return response.data;\n}\n\n\n\nfunction User({id}) {//id의 값을 props로 받아오겠다.\n  const {\n    data:user,\n    error,\n    isLoading\n  }=useAsync({\n    promiseFn:getUser,//프로미스를 반환하는 함수인 getUser을 넣는다.\n    id,\n    watch:id,//컴포넌트가 처음 작동할때는 getUserd에 id를 넣어서 작동한다.만약에 id값이 바뀌면 다시 useAsync을 실행하겠다.\n    //사실상 우리가 deps에 값을 넣었던 것과 같은 것이다.\n\n\n  });//id값이 바뀔때 마다 이함수를 호출하겠다.\n  \n  if (isLoading) return <div>로딩중...</div>\n  if (error) return <div>에러 발생했습니다.</div>\n  if (!user) return null;\n\n\n  return (\n    <div>\n      <h2>{user.username}</h2>\n      <p><b>Email : </b>{user.email}</p>\n    </div>\n  )\n}\nexport default User;"]},"metadata":{},"sourceType":"module"}