{"ast":null,"code":"import _slicedToArray from \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/Users1.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport axios from 'axios'; //LOADING,SUCCESS,ERRROR\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'LOADING':\n      return {\n        loading: true,\n        data: null,\n        error: null\n      };\n\n    case 'SUCCESS':\n      return {\n        laoding: false,\n        data: actin.data,\n        error: null\n      };\n\n    case 'ERROR':\n      return {\n        loading: false,\n        data: null,\n        error: action.error\n      };\n\n    default:\n      throw new Error(`UnHandled action type :${action.type}`);\n  }\n} //useReducer 사용하여 요청에 대한 상태를 관리하였다.\n\n\nfunction Users() {\n  const _useReducer = useReducer(reducer, {\n    laoding: false,\n    data: null,\n    error: null\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const fetchUsers = async () => {\n    //useEffect을 사용하여 컴포넌트가 가장 처음에 렌더링이 될때 fetchUsers라는 함수를 호출한다.\n    dispatch({\n      type: 'LOADING'\n    });\n\n    try {\n      const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n      dispatch({\n        type: 'SUCCESS',\n        data: response.data\n      });\n    } catch (e) {\n      dispatch({\n        type: 'ERROR',\n        error: e\n      });\n      console.log(e.response.status);\n    }\n  };\n\n  useEffect(() => {\n    // \n    fetchUsers();\n  }, []);\n\n  const _state = _slicedToArray(state, 3),\n        loading = _state[0],\n        data = _state[1],\n        error = _state[2]; //그다음에는 세가지 상태에 따라 다른 값을 렌더링 할 것이다.\n\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"\\uB85C\\uB529\\uC911...\");\n  if (error) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"\\uC5D0\\uB7EC \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4.\");\n  if (!users) return null; //users에 제대로된 값이 들어가지않았을때\n  //users에 제대로된값이 들어갔을 경우에\n\n  return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, users.map(user => React.createElement(\"li\", {\n    key: user.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, user.username, \"(\", user.name, \")\"))), React.createElement(\"button\", {\n    onClick: fetchUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"\\uB2E4\\uC2DC\\uBD88\\uB7EC\\uC624\\uAE30\"));\n}\n\nexport default Users;","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/Users1.js"],"names":["React","useReducer","useEffect","axios","reducer","state","action","type","loading","data","error","laoding","actin","Error","Users","dispatch","fetchUsers","response","get","e","console","log","status","users","map","user","id","username","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAIA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAuBC,MAAvB,EAA8B;AAC5B,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,SAAL;AACE,aAAO;AACLC,QAAAA,OAAO,EAAC,IADH;AAELC,QAAAA,IAAI,EAAC,IAFA;AAGLC,QAAAA,KAAK,EAAC;AAHD,OAAP;;AAKF,SAAK,SAAL;AACE,aAAO;AACLC,QAAAA,OAAO,EAAC,KADH;AAELF,QAAAA,IAAI,EAACG,KAAK,CAACH,IAFN;AAGLC,QAAAA,KAAK,EAAC;AAHD,OAAP;;AAKF,SAAK,OAAL;AACE,aAAO;AACLF,QAAAA,OAAO,EAAC,KADH;AAELC,QAAAA,IAAI,EAAC,IAFA;AAGLC,QAAAA,KAAK,EAACJ,MAAM,CAACI;AAHR,OAAP;;AAKF;AACG,YAAM,IAAIG,KAAJ,CAAW,0BAAyBP,MAAM,CAACC,IAAK,EAAhD,CAAN;AApBL;AAuBD,C,CACD;;;AACA,SAASO,KAAT,GAAiB;AAAA,sBACQb,UAAU,CAACG,OAAD,EAAS;AACxCO,IAAAA,OAAO,EAAC,KADgC;AAExCF,IAAAA,IAAI,EAAC,IAFmC;AAGxCC,IAAAA,KAAK,EAAC;AAHkC,GAAT,CADlB;AAAA;AAAA,QACRL,KADQ;AAAA,QACFU,QADE;;AAMf,QAAMC,UAAU,GAAG,YAAY;AAAC;AAC9BD,IAAAA,QAAQ,CAAC;AAACR,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAR;;AACA,QAAI;AACF,YAAMU,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAU,4CAAV,CAAvB;AACAH,MAAAA,QAAQ,CAAC;AAACR,QAAAA,IAAI,EAAC,SAAN;AAAgBE,QAAAA,IAAI,EAACQ,QAAQ,CAACR;AAA9B,OAAD,CAAR;AAED,KAJD,CAIE,OAAOU,CAAP,EAAU;AACVJ,MAAAA,QAAQ,CAAC;AAACR,QAAAA,IAAI,EAAC,OAAN;AAAcG,QAAAA,KAAK,EAACS;AAApB,OAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACF,QAAF,CAAWK,MAAvB;AAED;AAEF,GAZD;;AAcApB,EAAAA,SAAS,CAAC,MAAM;AAAC;AAEfc,IAAAA,UAAU;AACX,GAHQ,EAGN,EAHM,CAAT;;AApBe,gCAwBmBX,KAxBnB;AAAA,QAwBRG,OAxBQ;AAAA,QAwBAC,IAxBA;AAAA,QAwBYC,KAxBZ,cA0Bf;;;AACA,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACb,MAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAAP;AACX,MAAI,CAACa,KAAL,EAAY,OAAO,IAAP,CA7BG,CA6BS;AAExB;;AACA,SACE,0CACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCA,KAAK,CAACC,GAAN,CAAUC,IAAI,IAAI;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAChBD,IAAI,CAACE,QADW,OACAF,IAAI,CAACG,IADL,MAAlB,CADD,CADA,EAMF;AAAQ,IAAA,OAAO,EAAEZ,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CANE,CADF;AAWD;;AACD,eAAeF,KAAf","sourcesContent":["import React, { useReducer, useEffect } from 'react';\nimport axios from 'axios';\n\n\n\n//LOADING,SUCCESS,ERRROR\nfunction reducer(state,action){\n  switch(action.type){\n    case 'LOADING':\n      return {\n        loading:true,\n        data:null,\n        error:null\n      }\n    case 'SUCCESS':\n      return {\n        laoding:false,\n        data:actin.data,\n        error:null\n      }\n    case 'ERROR':\n      return {\n        loading:false,\n        data:null,\n        error:action.error\n      }\n    default:\n       throw new Error(`UnHandled action type :${action.type}`);\n\n  }\n}\n//useReducer 사용하여 요청에 대한 상태를 관리하였다.\nfunction Users() {\n  const [state,dispatch]=useReducer(reducer,{\n    laoding:false,\n    data:null,\n    error:null\n  })\n  const fetchUsers = async () => {//useEffect을 사용하여 컴포넌트가 가장 처음에 렌더링이 될때 fetchUsers라는 함수를 호출한다.\n    dispatch({type:'LOADING'});\n    try {\n      const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n      dispatch({type:'SUCCESS',data:response.data})\n\n    } catch (e) {\n      dispatch({type:'ERROR',error:e})\n      console.log(e.response.status);\n      \n    }\n    \n  }\n\n  useEffect(() => {// \n   \n    fetchUsers();\n  }, []);\n  const [loading,data:users, error]=state;\n\n  //그다음에는 세가지 상태에 따라 다른 값을 렌더링 할 것이다.\n  if (loading) return <div>로딩중...</div>\n  if (error) return <div>에러 발생했습니다.</div>\n  if (!users) return null;//users에 제대로된 값이 들어가지않았을때\n\n  //users에 제대로된값이 들어갔을 경우에\n  return (\n    <>\n    <ul>\n    {users.map(user => <li key={user.id}>\n      {user.username}({user.name})\n  </li>)}\n  </ul>\n  <button onClick={fetchUsers}>다시불러오기</button>{/**버튼을 눌렀을때 특정 api를 다시 불러오는 방법*/}\n\n    </>\n      )\n}\nexport default Users;"]},"metadata":{},"sourceType":"module"}