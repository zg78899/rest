{"ast":null,"code":"import _slicedToArray from \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/Users1.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport useAsync from './useAsync';\n\nasync function getUsers() {\n  //useAsync를 사용할때 callback으로 넣어줄 함수이다.\n  const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n  return response.data;\n} //LOADING,SUCCESS,ERRROR\n// function reducer(state,action){\n//   switch(action.type){\n//     case 'LOADING':\n//       return {\n//         loading:true,\n//         data:null,\n//         error:null\n//       }\n//     case 'SUCCESS':\n//       return {\n//         laoding:false,\n//         data:action.data,\n//         error:null\n//       }\n//     case 'ERROR':\n//       return {\n//         loading:false,\n//         data:null,\n//         error:action.error\n//       }\n//     default:\n//        throw new Error(`UnHandled action type :${action.type}`);\n//   }\n// }\n//useReducer 사용하여 요청에 대한 상태를 관리하였다.\n\n\nfunction Users1() {\n  const _useAsync = useAsync(getUsers),\n        _useAsync2 = _slicedToArray(_useAsync, 2),\n        state = _useAsync2[0],\n        refetch = _useAsync2[1]; // const [state,dispatch]=useReducer(reducer,{\n  //   loading:false,\n  //   data:null,\n  //   error:null\n  // })\n  // const fetchUsers = async () => {//useEffect을 사용하여 컴포넌트가 가장 처음에 렌더링이 될때 fetchUsers라는 함수를 호출한다.\n  //   dispatch({type:'LOADING'});\n  //   try {\n  //     const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n  //     dispatch({type:'SUCCESS',data:response.data})\n  //   } catch (e) {\n  //     dispatch({type:'ERROR',error:e})\n  //     console.log(e.response.status);\n  //   }\n  // }\n  // useEffect(() => {\n  //   fetchUsers();\n  // }, []);\n\n\n  const loading = state.loading,\n        users = state.data,\n        error = state.error; //그다음에는 세가지 상태에 따라 다른 값을 렌더링 할 것이다.\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"\\uB85C\\uB529\\uC911...\");\n  if (error) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"\\uC5D0\\uB7EC \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4.\");\n  if (!users) return null; //users에 제대로된 값이 들어가지않았을때\n  //users에 제대로된값이 들어갔을 경우에\n\n  return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, users.map(user => React.createElement(\"li\", {\n    key: user.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, user.username, \"(\", user.name, \")\"))), React.createElement(\"button\", {\n    onClick: refetch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"\\uB2E4\\uC2DC\\uBD88\\uB7EC\\uC624\\uAE30\"));\n}\n\nexport default Users1;","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/Users1.js"],"names":["React","axios","useAsync","getUsers","response","get","data","Users1","state","refetch","loading","users","error","map","user","id","username","name"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAeC,QAAf,GAAyB;AAAC;AAC1B,QAAMC,QAAQ,GAAC,MAAMH,KAAK,CAACI,GAAN,CAAU,4CAAV,CAArB;AACA,SAAOD,QAAQ,CAACE,IAAhB;AAEC,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA,SAASC,MAAT,GAAkB;AAAA,oBACML,QAAQ,CAACC,QAAD,CADd;AAAA;AAAA,QACTK,KADS;AAAA,QACHC,OADG,kBAGhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AArBgB,QAsBTC,OAtBS,GAsBoBF,KAtBpB,CAsBTE,OAtBS;AAAA,QAsBKC,KAtBL,GAsBoBH,KAtBpB,CAsBAF,IAtBA;AAAA,QAsBYM,KAtBZ,GAsBoBJ,KAtBpB,CAsBYI,KAtBZ,EAuBhB;;AACA,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACb,MAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAAP;AACX,MAAI,CAACD,KAAL,EAAY,OAAO,IAAP,CA1BI,CA0BQ;AAExB;;AACA,SACE,0CACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCA,KAAK,CAACE,GAAN,CAAUC,IAAI,IAAI;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAChBD,IAAI,CAACE,QADW,OACAF,IAAI,CAACG,IADL,MAAlB,CADD,CADA,EAOF;AAAQ,IAAA,OAAO,EAAER,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAPE,CADF;AAYD;;AACD,eAAeF,MAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport useAsync from './useAsync';\n\nasync function getUsers(){//useAsync를 사용할때 callback으로 넣어줄 함수이다.\nconst response=await axios.get('http://jsonplaceholder.typicode.com/users/');\nreturn response.data;\n\n}\n\n//LOADING,SUCCESS,ERRROR\n// function reducer(state,action){\n//   switch(action.type){\n//     case 'LOADING':\n//       return {\n//         loading:true,\n//         data:null,\n//         error:null\n//       }\n//     case 'SUCCESS':\n//       return {\n//         laoding:false,\n//         data:action.data,\n//         error:null\n//       }\n//     case 'ERROR':\n//       return {\n//         loading:false,\n//         data:null,\n//         error:action.error\n//       }\n//     default:\n//        throw new Error(`UnHandled action type :${action.type}`);\n\n//   }\n// }\n//useReducer 사용하여 요청에 대한 상태를 관리하였다.\nfunction Users1() {\n  const [state,refetch]=useAsync(getUsers);\n\n  // const [state,dispatch]=useReducer(reducer,{\n  //   loading:false,\n  //   data:null,\n  //   error:null\n  // })\n  // const fetchUsers = async () => {//useEffect을 사용하여 컴포넌트가 가장 처음에 렌더링이 될때 fetchUsers라는 함수를 호출한다.\n  //   dispatch({type:'LOADING'});\n  //   try {\n  //     const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n  //     dispatch({type:'SUCCESS',data:response.data})\n\n  //   } catch (e) {\n  //     dispatch({type:'ERROR',error:e})\n  //     console.log(e.response.status);\n  //   }\n  // }\n  // useEffect(() => {\n  //   fetchUsers();\n  // }, []);\n  const {loading, data:users ,error}= state;\n  //그다음에는 세가지 상태에 따라 다른 값을 렌더링 할 것이다.\n  if (loading) return <div>로딩중...</div>\n  if (error) return <div>에러 발생했습니다.</div>\n  if (!users) return null;//users에 제대로된 값이 들어가지않았을때\n\n  //users에 제대로된값이 들어갔을 경우에\n  return (\n    <>\n    <ul>\n    {users.map(user => <li key={user.id}>\n      {user.username}({user.name})\n  </li>)}\n  </ul>\n  {/* <button onClick={fetchUsers}>다시불러오기</button>*버튼을 눌렀을때 특정 api를 다시 불러오는 방법 */}\n  <button onClick={refetch}>다시불러오기</button>{/**버튼을 눌렀을때 특정 api를 다시 불러오는 방법*/}\n\n    </>\n      )\n}\nexport default Users1;"]},"metadata":{},"sourceType":"module"}