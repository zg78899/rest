{"ast":null,"code":"var _jsxFileName = \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/User1.js\";\nimport React from 'react';\nimport { useUsersState, useUsesrDispatch } from './UsrsContext'; // import axios from 'axios';\n// import {useAsync} from 'react-async';\n//react-async 라이브러리를 사용하면 장점과 단점이 존재한다.\n//장점:필요한 경우에 라이브러리를 받아와 사용하면 되기때문에 유용하다.\n//컴포넌트에서 비동기 작업을 위해 사용되는 기능 들이 탑재 되어대부분 처리가 가능하고, 컴포넌트 형태로도 가능 하다.\n//특정 프로미스 작업을 취소하는 기능도 존재한다.\n//단점으로 옵션 조금 복잡하다,커스텀 훅의 경우는 조금더 간단하다는( 파라미터를 몇개 전달하면 되기때문에) 장점이 존재\n// async function getUser({id}){\n//   const response=await axios.get(`http://jsonplaceholder.typicode.com/users/${id}`);\n//   return response.data;\n// }\n\nfunction User1({\n  id\n}) {\n  //id의 값을 props로 받아오겠다.\n  // const {\n  //   data:user,\n  //   error,\n  //   isLoading\n  // } = useAsync({\n  //   promiseFn:getUser,//프로미스를 반환하는 함수인 getUser을 넣는다.\n  //   id,\n  //   watch:id,//컴포넌트가 처음 작동할때는 getUserd에 id를 넣어서 작동한다.만약에 id값이 바뀌면 다시 useAsync을 실행하겠다.\n  //   //사실상 우리가 deps에 값을 넣었던 것과 같은 것이다.\n  // });//id값이 바뀔때 마다 이함수를 호출하겠다.\n  const state = useUsersState();\n  const dispatch = useUsesrDispatch();\n  const _state$user = state.user,\n        loading = _state$user.loading,\n        user = _state$user.data,\n        error = _state$user.error;\n  if (Loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"\\uB85C\\uB529\\uC911...\");\n  if (error) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"\\uC5D0\\uB7EC \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4.\");\n  if (!user) return null;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, user.username), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Email : \"), user.email));\n}\n\nexport default User1;","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/User1.js"],"names":["React","useUsersState","useUsesrDispatch","User1","id","state","dispatch","user","loading","data","error","Loading","username","email"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,eAAhD,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASC,KAAT,CAAe;AAACC,EAAAA;AAAD,CAAf,EAAqB;AAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA,QAAMC,KAAK,GAACJ,aAAa,EAAzB;AACA,QAAMK,QAAQ,GAACJ,gBAAgB,EAA/B;AAfmB,sBAiBaG,KAAK,CAACE,IAjBnB;AAAA,QAiBZC,OAjBY,eAiBZA,OAjBY;AAAA,QAiBCD,IAjBD,eAiBJE,IAjBI;AAAA,QAiBMC,KAjBN,eAiBMA,KAjBN;AAoBnB,MAAIC,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACb,MAAID,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAAP;AACX,MAAI,CAACH,IAAL,EAAW,OAAO,IAAP;AAGX,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,CAACK,QAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,EAAmBL,IAAI,CAACM,KAAxB,CAFF,CADF;AAMD;;AACD,eAAeV,KAAf","sourcesContent":["import React from 'react';\nimport { useUsersState, useUsesrDispatch } from './UsrsContext';\n// import axios from 'axios';\n// import {useAsync} from 'react-async';\n//react-async 라이브러리를 사용하면 장점과 단점이 존재한다.\n//장점:필요한 경우에 라이브러리를 받아와 사용하면 되기때문에 유용하다.\n//컴포넌트에서 비동기 작업을 위해 사용되는 기능 들이 탑재 되어대부분 처리가 가능하고, 컴포넌트 형태로도 가능 하다.\n//특정 프로미스 작업을 취소하는 기능도 존재한다.\n//단점으로 옵션 조금 복잡하다,커스텀 훅의 경우는 조금더 간단하다는( 파라미터를 몇개 전달하면 되기때문에) 장점이 존재\n// async function getUser({id}){\n//   const response=await axios.get(`http://jsonplaceholder.typicode.com/users/${id}`);\n//   return response.data;\n// }\n\n\n\nfunction User1({id}) {//id의 값을 props로 받아오겠다.\n  // const {\n  //   data:user,\n  //   error,\n  //   isLoading\n  // } = useAsync({\n  //   promiseFn:getUser,//프로미스를 반환하는 함수인 getUser을 넣는다.\n  //   id,\n  //   watch:id,//컴포넌트가 처음 작동할때는 getUserd에 id를 넣어서 작동한다.만약에 id값이 바뀌면 다시 useAsync을 실행하겠다.\n  //   //사실상 우리가 deps에 값을 넣었던 것과 같은 것이다.\n\n\n  // });//id값이 바뀔때 마다 이함수를 호출하겠다.\n\n  const state=useUsersState();\n  const dispatch=useUsesrDispatch();\n\n  const {loading,data:user,error}=state.user;\n\n  \n  if (Loading) return <div>로딩중...</div>\n  if (error) return <div>에러 발생했습니다.</div>\n  if (!user) return null;\n\n\n  return (\n    <div>\n      <h2>{user.username}</h2>\n      <p><b>Email : </b>{user.email}</p>\n    </div>\n  )\n}\nexport default User1;"]},"metadata":{},"sourceType":"module"}