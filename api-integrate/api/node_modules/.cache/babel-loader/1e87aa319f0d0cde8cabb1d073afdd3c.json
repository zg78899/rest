{"ast":null,"code":"import _slicedToArray from \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useReducer, useCallback } from 'react';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'LOADING':\n      return {\n        loading: true,\n        data: null,\n        error: null\n      };\n\n    case 'SUCCESS':\n      return {\n        laoding: false,\n        data: action.data,\n        error: null\n      };\n\n    case 'ERROR':\n      return {\n        loading: false,\n        data: null,\n        error: action.error\n      };\n\n    default:\n      throw new Error(`UnHandled action type :${action.type}`);\n  }\n}\n\nfunction useAsync(callback, deps = []) {\n  //callback은 api을 호출하는 함수를 넣어줄것,deps는 useEffect에서 사용하는 두번째 파라미터를 그래도 받아와서 사용할것이다.\n  const _useReducer = useReducer(reducer, {\n    loading: false,\n    data: null,\n    error: null\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const fetchData = useCallback(async () => {\n    dispatch({\n      type: 'LOADING'\n    });\n\n    try {\n      const data = await callback();\n      dispatch({\n        type: 'SUCCESS',\n        data\n      });\n    } catch (e) {\n      dispatch({\n        type: 'ERROR',\n        error: e\n      });\n    }\n  }, [callback]);\n  useEffect(() => {\n    fetchData(); //eslint-disable-next-line\n  }, deps);\n  return [state, fetchData]; //useAsync을 통해서 첫번재 값으로는 state을 가져올수있고,두번쩨값으로는 특정요청을 다시시작ㄴ하는 함수를 받아와서 사용할수있다.\n}\n\nexport default useAsync;","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/useAsync.js"],"names":["useEffect","useReducer","useCallback","reducer","state","action","type","loading","data","error","laoding","Error","useAsync","callback","deps","dispatch","fetchData","e"],"mappings":";AAAA,SAAQA,SAAR,EAAkBC,UAAlB,EAA6BC,WAA7B,QAA+C,OAA/C;;AAGA,SAASC,OAAT,CAAiBC,KAAjB,EAAuBC,MAAvB,EAA8B;AAC5B,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,SAAL;AACE,aAAO;AACLC,QAAAA,OAAO,EAAC,IADH;AAELC,QAAAA,IAAI,EAAC,IAFA;AAGLC,QAAAA,KAAK,EAAC;AAHD,OAAP;;AAKF,SAAK,SAAL;AACE,aAAO;AACLC,QAAAA,OAAO,EAAC,KADH;AAELF,QAAAA,IAAI,EAACH,MAAM,CAACG,IAFP;AAGLC,QAAAA,KAAK,EAAC;AAHD,OAAP;;AAKF,SAAK,OAAL;AACE,aAAO;AACLF,QAAAA,OAAO,EAAC,KADH;AAELC,QAAAA,IAAI,EAAC,IAFA;AAGLC,QAAAA,KAAK,EAACJ,MAAM,CAACI;AAHR,OAAP;;AAKF;AACG,YAAM,IAAIE,KAAJ,CAAW,0BAAyBN,MAAM,CAACC,IAAK,EAAhD,CAAN;AApBL;AAuBD;;AACD,SAASM,QAAT,CAAkBC,QAAlB,EAA2BC,IAAI,GAAC,EAAhC,EAAmC;AAAC;AAAD,sBACVb,UAAU,CAACE,OAAD,EAAS;AACxCI,IAAAA,OAAO,EAAC,KADgC;AAExCC,IAAAA,IAAI,EAAC,IAFmC;AAGxCC,IAAAA,KAAK,EAAC;AAHkC,GAAT,CADA;AAAA;AAAA,QAC1BL,KAD0B;AAAA,QACpBW,QADoB;;AAOjC,QAAMC,SAAS,GAAGd,WAAW,CAAC,YAAU;AACtCa,IAAAA,QAAQ,CAAC;AAACT,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAR;;AACA,QAAG;AACD,YAAME,IAAI,GAAG,MAAMK,QAAQ,EAA3B;AACAE,MAAAA,QAAQ,CAAC;AAACT,QAAAA,IAAI,EAAC,SAAN;AAAgBE,QAAAA;AAAhB,OAAD,CAAR;AAED,KAJD,CAIC,OAAMS,CAAN,EAAQ;AACTF,MAAAA,QAAQ,CAAC;AAACT,QAAAA,IAAI,EAAC,OAAN;AAAcG,QAAAA,KAAK,EAACQ;AAApB,OAAD,CAAR;AACC;AACF,GAT4B,EAS3B,CAACJ,QAAD,CAT2B,CAA7B;AAWAb,EAAAA,SAAS,CAAC,MAAI;AACZgB,IAAAA,SAAS,GADG,CAEZ;AACD,GAHQ,EAGPF,IAHO,CAAT;AAIA,SAAO,CAACV,KAAD,EAAOY,SAAP,CAAP,CAtBiC,CAsBR;AAE1B;;AACD,eAAeJ,QAAf","sourcesContent":["import {useEffect,useReducer,useCallback} from 'react';\n\n\nfunction reducer(state,action){\n  switch(action.type){\n    case 'LOADING':\n      return {\n        loading:true,\n        data:null,\n        error:null\n      }\n    case 'SUCCESS':\n      return {\n        laoding:false,\n        data:action.data,\n        error:null\n      }\n    case 'ERROR':\n      return {\n        loading:false,\n        data:null,\n        error:action.error\n      }\n    default:\n       throw new Error(`UnHandled action type :${action.type}`);\n\n  }\n}\nfunction useAsync(callback,deps=[]){//callback은 api을 호출하는 함수를 넣어줄것,deps는 useEffect에서 사용하는 두번째 파라미터를 그래도 받아와서 사용할것이다.\n  const [state,dispatch]=useReducer(reducer,{\n    loading:false,\n    data:null,\n    error:null\n\n  });\n  const fetchData = useCallback(async ()=>{\n    dispatch({type:'LOADING'});\n    try{\n      const data = await callback();\n      dispatch({type:'SUCCESS',data})\n\n    }catch(e){\n    dispatch({type:'ERROR',error:e})\n    }\n  },[callback])\n  \n  useEffect(()=>{\n    fetchData();\n    //eslint-disable-next-line\n  },deps);\n  return [state,fetchData];//useAsync을 통해서 첫번재 값으로는 state을 가져올수있고,두번쩨값으로는 특정요청을 다시시작ㄴ하는 함수를 받아와서 사용할수있다.\n\n}\nexport default useAsync;"]},"metadata":{},"sourceType":"module"}