{"ast":null,"code":"import _slicedToArray from \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/UsrsContext.js\";\nimport React, { useReducer, useContext, createContext } from 'react'; // import axios from 'axios';\n\nimport * as api from './api'; //api파일에 있는 모든 함수들이 들어있는 api라는 객체를 리턴하게 된다.\n\nimport createAsyncDispatcher, { initialAsyncState, createAsyncHandler } from './asyncActionUtils';\nconst initalState = {\n  users: initialAsyncState,\n  // users: {\n  //   lading: false,\n  //   data: null,//결과 값\n  //   error: null\n  // },\n  user: initialAsyncState // user: {\n  //   loading: false,\n  //   data: null,\n  //   error: null\n  // }\n\n}; // const loadingState = {\n//   loading: true,\n//   data: null,\n//   error: null\n// };//로딩 중일때 는 이 객체가 기본 값을대체한다.\n// const success = (data) => ({\n//   loading: false,\n//   data,\n//   error: null\n// });\n// const error = e => ({\n//   laoding: false,\n//   data: null,\n//   error: e\n// })\n//GET_USERS,GET_USERS_SUCCESS,GET_USERS_ERROR(여러명의 유저를 가져오는 것)\n//GET_USER,GET_USER_SUCCESS,GET_USER_ERROR(특정 유저를 가져오는 것이다.)\n//총 6가지 상태에 대한 reducer을 만들었다.\n\nconst usersHandler = createAsyncHandler('GET_USERS', 'users');\nconst userHandler = createAsyncHandler('GET_USER', 'user');\n\nfunction usersRecuder(state, action) {\n  switch (action.type) {\n    case 'GET_USERS': // return {\n    //   ...state,\n    //   users: loadingState,\n    // };\n\n    case 'GET_USERS_SUCCESS': // return {\n    //   ...state,\n    //   users: success(action.data)\n    // }\n\n    case 'GET_USERS_ERROR':\n      // return {\n      //   ...state,\n      //   users: error(action.error)\n      // }\n      return usersHandler(state, action);\n\n    case 'GET_USER': // return {\n    //   ...state,\n    //   user: loadingState,\n    // };\n\n    case 'GET_USER_SUCCESS': // return {\n    //   ...state,\n    //   user: success(action.data)\n    // }\n\n    case 'GET_USER_ERROR':\n      // return {\n      //   ...state,\n      //   user: error(action.error)\n      // }\n      return userHandler(state, action);\n\n    default:\n      throw new Error('Unhandled aciton type', action.type);\n  }\n}\n\nconst UsersStateContext = createContext(null); //상태를 위한 context\n\nconst UsersDispatchContext = createContext(null); //dispatch를 위한 context\n//context을 나누는 이유는 나중에 컴포넌트를 최적화 하는데 용이하기 때문이다.\n//해당 dispatch값이나 state을 받아와서 사용하기에도 용이하기 때문이다.\n\nexport function UsersProvider({\n  children\n}) {\n  const _useReducer = useReducer(usersRecuder, initalState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  return React.createElement(UsersStateContext.Provider, {\n    value: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(UsersDispatchContext.Provider, {\n    value: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, children));\n}\nexport function useUsersState() {\n  const state = useContext(UsersStateContext);\n\n  if (!state) {\n    throw new Error('Cannot Fund UserProvider');\n  } //만약에 state가 유효하지않다면 error을 발생 시키고 \n\n\n  return state;\n}\nexport function useUsesrDispatch() {\n  const dispatch = useContext(UsersDispatchContext);\n\n  if (!dispatch) {\n    throw new Error('Cannot Find userProvider');\n  }\n\n  return dispatch;\n}\nexport const getUsers = createAsyncDispatcher('GET_USERS', api.getUsers); //createAsyncDispatcher 의 첫번째 파라미터는 타입,두번째 파라미터는 프로미스 함수\n\nexport const getUser = createAsyncDispatcher('GET_USER', api.getUser); // export async function getUsers(dispatch) {\n//   dispatch({ type: 'GET_USERS' });\n//   try {\n//     const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n//     dispatch({\n//       type: 'GET_USERS_SUCCESS',\n//       data: response.data\n//     })\n//   } catch (e) {\n//     dispatch({\n//       type: 'GET_USERS_ERROR',\n//       error: e\n//     })\n//   }\n// }\n// export async function getUser( dispatch ,id) {\n//   dispatch({ type: 'GET_USER' });\n//   try {\n//     const response = await \n//     axios.get(`http://jsonplaceholder.typicode.com/users/${id}`);\n//     dispatch({\n//       type: 'GET_USER_SUCCESS',\n//       data: response.data\n//     })\n//   } catch (e) {\n//     dispatch({\n//       type: 'GET_USER_ERROR',\n//       error: e\n//     })\n//   }\n// }","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/UsrsContext.js"],"names":["React","useReducer","useContext","createContext","api","createAsyncDispatcher","initialAsyncState","createAsyncHandler","initalState","users","user","usersHandler","userHandler","usersRecuder","state","action","type","Error","UsersStateContext","UsersDispatchContext","UsersProvider","children","dispatch","useUsersState","useUsesrDispatch","getUsers","getUser"],"mappings":"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","sourcesContent":["import React, { useReducer, useContext, createContext } from 'react';\n// import axios from 'axios';\nimport * as api from './api';//api파일에 있는 모든 함수들이 들어있는 api라는 객체를 리턴하게 된다.\nimport createAsyncDispatcher, { initialAsyncState, createAsyncHandler } from './asyncActionUtils';\n\nconst initalState = {\n  users: initialAsyncState,\n  // users: {\n  //   lading: false,\n  //   data: null,//결과 값\n  //   error: null\n  // },\n  user: initialAsyncState\n  // user: {\n  //   loading: false,\n  //   data: null,\n  //   error: null\n  // }\n}\n// const loadingState = {\n//   loading: true,\n//   data: null,\n//   error: null\n// };//로딩 중일때 는 이 객체가 기본 값을대체한다.\n// const success = (data) => ({\n//   loading: false,\n//   data,\n//   error: null\n// });\n// const error = e => ({\n//   laoding: false,\n//   data: null,\n//   error: e\n// })\n//GET_USERS,GET_USERS_SUCCESS,GET_USERS_ERROR(여러명의 유저를 가져오는 것)\n//GET_USER,GET_USER_SUCCESS,GET_USER_ERROR(특정 유저를 가져오는 것이다.)\n//총 6가지 상태에 대한 reducer을 만들었다.\n\nconst usersHandler = createAsyncHandler('GET_USERS', 'users');\nconst userHandler = createAsyncHandler('GET_USER', 'user');\n\nfunction usersRecuder(state, action) {\n  switch (action.type) {\n    case 'GET_USERS':\n    // return {\n    //   ...state,\n    //   users: loadingState,\n    // };\n    case 'GET_USERS_SUCCESS':\n    // return {\n    //   ...state,\n    //   users: success(action.data)\n    // }\n    case 'GET_USERS_ERROR':\n      // return {\n      //   ...state,\n      //   users: error(action.error)\n      // }\n      return usersHandler(state, action);\n    case 'GET_USER':\n    // return {\n    //   ...state,\n    //   user: loadingState,\n    // };\n    case 'GET_USER_SUCCESS':\n    // return {\n    //   ...state,\n    //   user: success(action.data)\n    // }\n    case 'GET_USER_ERROR':\n      // return {\n      //   ...state,\n      //   user: error(action.error)\n      // }\n      return userHandler(state, action);\n\n    default:\n      throw new Error('Unhandled aciton type', action.type);\n  }\n}\n\nconst UsersStateContext = createContext(null);//상태를 위한 context\nconst UsersDispatchContext = createContext(null)//dispatch를 위한 context\n//context을 나누는 이유는 나중에 컴포넌트를 최적화 하는데 용이하기 때문이다.\n//해당 dispatch값이나 state을 받아와서 사용하기에도 용이하기 때문이다.\n\nexport function UsersProvider({ children }) {\n  const [state, dispatch] = useReducer(usersRecuder, initalState);\n  return (\n    <UsersStateContext.Provider value={state}>\n      <UsersDispatchContext.Provider value={dispatch}>\n        {children}\n      </UsersDispatchContext.Provider>\n    </UsersStateContext.Provider>\n  )\n}\nexport function useUsersState() {\n  const state = useContext(UsersStateContext);\n  if (!state) {\n    throw new Error('Cannot Fund UserProvider');\n  }//만약에 state가 유효하지않다면 error을 발생 시키고 \n  return state;\n\n}\nexport function useUsesrDispatch() {\n  const dispatch = useContext(UsersDispatchContext);\n  if (!dispatch) {\n    throw new Error('Cannot Find userProvider');\n  }\n  return dispatch;\n}\n\nexport const getUsers = createAsyncDispatcher('GET_USERS', api.getUsers)\n//createAsyncDispatcher 의 첫번째 파라미터는 타입,두번째 파라미터는 프로미스 함수\n\nexport const getUser = createAsyncDispatcher('GET_USER', api.getUser);\n\n// export async function getUsers(dispatch) {\n//   dispatch({ type: 'GET_USERS' });\n//   try {\n//     const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n//     dispatch({\n//       type: 'GET_USERS_SUCCESS',\n//       data: response.data\n//     })\n//   } catch (e) {\n//     dispatch({\n//       type: 'GET_USERS_ERROR',\n//       error: e\n//     })\n//   }\n// }\n\n// export async function getUser( dispatch ,id) {\n//   dispatch({ type: 'GET_USER' });\n//   try {\n//     const response = await \n//     axios.get(`http://jsonplaceholder.typicode.com/users/${id}`);\n//     dispatch({\n//       type: 'GET_USER_SUCCESS',\n//       data: response.data\n//     })\n//   } catch (e) {\n//     dispatch({\n//       type: 'GET_USER_ERROR',\n//       error: e\n//     })\n//   }\n// }\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}