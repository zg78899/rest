{"ast":null,"code":"import _slicedToArray from \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/Users1.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useAsync } from 'react-async';\nimport User1 from './User1';\n\nasync function getUsers() {\n  //useAsync를 사용할때 callback으로 넣어줄 함수이다.\n  const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n  return response.data;\n} //이부분은 파라미터로 받아오는것이 없기에 딱히 수정할것이없다.\n//LOADING,SUCCESS,ERRROR\n// function reducer(state,action){\n//   switch(action.type){\n//     case 'LOADING':\n//       return {\n//         loading:true,\n//         data:null,\n//         error:null\n//       }\n//     case 'SUCCESS':\n//       return {\n//         laoding:false,\n//         data:action.data,\n//         error:null\n//       }\n//     case 'ERROR':\n//       return {\n//         loading:false,\n//         data:null,\n//         error:action.error\n//       }\n//     default:\n//        throw new Error(`UnHandled action type :${action.type}`);\n//   }\n// }\n//useReducer 사용하여 요청에 대한 상태를 관리하였다.\n\n\nfunction Users1() {\n  // const [state, refetch] = useAsync(getUsers,[],true);//useAsync의두번째 파라미터와 세번째 파라미터를 넣는다.\n  //이렇게 하면 컴포넌트가 처음 시작할때 렌더링 되는 것을 생략해주는 것이다.\n  //useAsync을 통해서 요청에 대한 것들을 컴포넌트에서 처리하기때문에 코드가 간결해졌다.\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        userId = _useState2[0],\n        setUserId = _useState2[1];\n\n  const _useAsync = useAsync({\n    //reload는 이전에 사용한 refech 와 같은 기능을 하는 것이다.\n    deferFn: getUsers\n  }),\n        users = _useAsync.data,\n        error = _useAsync.error,\n        isLoading = _useAsync.isLoading,\n        reload = _useAsync.reload,\n        run = _useAsync.run; // const [state,dispatch]=useReducer(reducer,{\n  //   loading:false,\n  //   data:null,\n  //   error:null\n  // })\n  // const fetchUsers = async () => {//useEffect을 사용하여 컴포넌트가 가장 처음에 렌더링이 될때 fetchUsers라는 함수를 호출한다.\n  //   dispatch({type:'LOADING'});\n  //   try {\n  //     const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n  //     dispatch({type:'SUCCESS',data:response.data})\n  //   } catch (e) {\n  //     dispatch({type:'ERROR',error:e})\n  //     console.log(e.response.status);\n  //   }\n  // }\n  // useEffect(() => {\n  //   fetchUsers();\n  // }, []);\n  // const { loading, data: users, error } = state;\n  //그다음에는 세가지 상태에 따라 다른 값을 렌더링 할 것이다.\n\n\n  if (isLoading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"\\uB85C\\uB529\\uC911...\");\n  if (error) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"\\uC5D0\\uB7EC \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4.\"); // if (!users) return null;//users에 제대로된 값이 들어가지않았을때\n\n  if (!users) return React.createElement(\"button\", {\n    onClick: reload,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"\\uBD88\\uB7EC\\uC624\\uAE30\"); //\n  //이렇게 버튼을 클릭해야만 데이터를 가져온다.\n  //users에 제대로된값이 들어갔을 경우에\n\n  return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, users.map(user => React.createElement(\"li\", {\n    key: user.id,\n    onClick: () => setUserId(user.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, user.username, \"(\", user.name, \")\"))), React.createElement(\"button\", {\n    onClick: reload,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"\\uB2E4\\uC2DC\\uBD88\\uB7EC\\uC624\\uAE30\"), userId && React.createElement(User1, {\n    id: userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }));\n}\n\nexport default Users1; // 지금의 경우에는 컴포넌트가 처음 렌더링되는 시점에만 데이터 요청이 이뤄지고있다.\n// 1.특정 버튼을 눌러야만 렌더링을 시작하고시파면 어떻게 해야할까?이를 위해서 useAysnc의 세번째 파라미터를 설정한다.\n// 2.우리가 api함수를 호출할때 특정 파라미터가 필요할때 어떻게 하는 지 알아보자!","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/Users1.js"],"names":["React","useState","axios","useAsync","User1","getUsers","response","get","data","Users1","userId","setUserId","deferFn","users","error","isLoading","reload","run","map","user","id","username","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,eAAeC,QAAf,GAA0B;AAAC;AACzB,QAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,4CAAV,CAAvB;AACA,SAAOD,QAAQ,CAACE,IAAhB;AAED,C,CAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA,SAASC,MAAT,GAAkB;AAChB;AACA;AACA;AAHgB,oBAKSR,QAAQ,CAAC,IAAD,CALjB;AAAA;AAAA,QAKTS,MALS;AAAA,QAKFC,SALE;;AAAA,oBAMiCR,QAAQ,CAAC;AAAC;AACzDS,IAAAA,OAAO,EAACP;AADgD,GAAD,CANzC;AAAA,QAMHQ,KANG,aAMTL,IANS;AAAA,QAMIM,KANJ,aAMIA,KANJ;AAAA,QAMWC,SANX,aAMWA,SANX;AAAA,QAMqBC,MANrB,aAMqBA,MANrB;AAAA,QAM4BC,GAN5B,aAM4BA,GAN5B,EAYhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIF,SAAJ,EAAe,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACf,MAAID,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAAP,CAlCK,CAmChB;;AACA,MAAI,CAACD,KAAL,EAAY,OAAO;AAAQ,IAAA,OAAO,EAAEG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAP,CApCI,CAoC0C;AAC1D;AAEA;;AACA,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAI;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAkB,IAAA,OAAO,EAAE,MAAIT,SAAS,CAACQ,IAAI,CAACC,EAAN,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAChBD,IAAI,CAACE,QADW,OACAF,IAAI,CAACG,IADL,MAAlB,CADH,CADF,EAOE;AAAQ,IAAA,OAAO,EAAEN,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAPF,EAQGN,MAAM,IAAI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAEA,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARb,CADF;AAaD;;AACD,eAAeD,MAAf,C,CAEA;AACA;AACA","sourcesContent":["import React,{useState} from 'react';\nimport axios from 'axios';\nimport {useAsync} from 'react-async';\nimport User1 from './User1';\n\nasync function getUsers() {//useAsync를 사용할때 callback으로 넣어줄 함수이다.\n  const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n  return response.data;\n\n}//이부분은 파라미터로 받아오는것이 없기에 딱히 수정할것이없다.\n\n//LOADING,SUCCESS,ERRROR\n// function reducer(state,action){\n//   switch(action.type){\n//     case 'LOADING':\n//       return {\n//         loading:true,\n//         data:null,\n//         error:null\n//       }\n//     case 'SUCCESS':\n//       return {\n//         laoding:false,\n//         data:action.data,\n//         error:null\n//       }\n//     case 'ERROR':\n//       return {\n//         loading:false,\n//         data:null,\n//         error:action.error\n//       }\n//     default:\n//        throw new Error(`UnHandled action type :${action.type}`);\n\n//   }\n// }\n//useReducer 사용하여 요청에 대한 상태를 관리하였다.\nfunction Users1() {\n  // const [state, refetch] = useAsync(getUsers,[],true);//useAsync의두번째 파라미터와 세번째 파라미터를 넣는다.\n  //이렇게 하면 컴포넌트가 처음 시작할때 렌더링 되는 것을 생략해주는 것이다.\n  //useAsync을 통해서 요청에 대한 것들을 컴포넌트에서 처리하기때문에 코드가 간결해졌다.\n\n  const [userId,setUserId]=useState(null);\n  const {data: users, error, isLoading,reload,run}=useAsync({//reload는 이전에 사용한 refech 와 같은 기능을 하는 것이다.\n    deferFn:getUsers\n  })\n\n\n\n  // const [state,dispatch]=useReducer(reducer,{\n  //   loading:false,\n  //   data:null,\n  //   error:null\n  // })\n  // const fetchUsers = async () => {//useEffect을 사용하여 컴포넌트가 가장 처음에 렌더링이 될때 fetchUsers라는 함수를 호출한다.\n  //   dispatch({type:'LOADING'});\n  //   try {\n  //     const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n  //     dispatch({type:'SUCCESS',data:response.data})\n\n  //   } catch (e) {\n  //     dispatch({type:'ERROR',error:e})\n  //     console.log(e.response.status);\n  //   }\n  // }\n  // useEffect(() => {\n  //   fetchUsers();\n  // }, []);\n  // const { loading, data: users, error } = state;\n  //그다음에는 세가지 상태에 따라 다른 값을 렌더링 할 것이다.\n  if (isLoading) return <div>로딩중...</div>\n  if (error) return <div>에러 발생했습니다.</div>\n  // if (!users) return null;//users에 제대로된 값이 들어가지않았을때\n  if (!users) return <button onClick={reload}>불러오기</button>;//\n  //이렇게 버튼을 클릭해야만 데이터를 가져온다.\n\n  //users에 제대로된값이 들어갔을 경우에\n  return (\n    <>\n      <ul>\n        {users.map(user => <li key={user.id} onClick={()=>setUserId(user.id)}>\n          {user.username}({user.name})\n  </li>)}\n      </ul>\n      {/* <button onClick={fetchUsers}>다시불러오기</button>*버튼을 눌렀을때 특정 api를 다시 불러오는 방법 */}\n      <button onClick={reload}>다시불러오기</button>{/**버튼을 눌렀을때 특정 api를 다시 불러오는 방법*/}\n      {userId && <User1 id={userId}/>}\n\n    </>\n  )\n}\nexport default Users1;\n\n// 지금의 경우에는 컴포넌트가 처음 렌더링되는 시점에만 데이터 요청이 이뤄지고있다.\n// 1.특정 버튼을 눌러야만 렌더링을 시작하고시파면 어떻게 해야할까?이를 위해서 useAysnc의 세번째 파라미터를 설정한다.\n// 2.우리가 api함수를 호출할때 특정 파라미터가 필요할때 어떻게 하는 지 알아보자!\n\n"]},"metadata":{},"sourceType":"module"}