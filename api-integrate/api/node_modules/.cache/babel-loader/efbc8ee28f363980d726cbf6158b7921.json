{"ast":null,"code":"import _slicedToArray from \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/Users.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction Users() {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        users = _useState2[0],\n        setUsers = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  const fetchUsers = async () => {\n    //useEffect을 사용하여 컴포넌트가 가장 처음에 렌더링이 될때 fetchUsers라는 함수를 호출한다.\n    try {\n      setUsers(null);\n      setError(null); //두가지 값을 초기화\n\n      setLoading(true); //로딩이 시작되었다는 것을 의미한다.\n\n      const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n      setUsers(response.data); //응답의 결과값을 보기위해,요청이 성공하면 setUsers의 값으로 설정을 해준다.setUsers 값을 바꾼다.\n    } catch (e) {\n      // console.log(e.response.status);\n      setError(e); //error가 발생하면 에러의 값을 바꾼다.\n    }\n\n    setLoading(false); //제일 마지막으로 로딩이 끝났다는 것을 알려야 한다.\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []); //그다음에는 세가지 상태에 따라 다른 값을 렌더링 할 것이다.\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"\\uB85C\\uB529\\uC911...\");\n  if (error) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"\\uC5D0\\uB7EC \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4.\");\n  if (!users) return null; //users에 제대로된 값이 들어가지않았을때\n  //users에 제대로된값이 들어갔을 경우에\n\n  return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, users.map(user => React.createElement(\"li\", {\n    key: user.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, user.username, \"(\", user.name, \")\"))), React.createElement(\"button\", {\n    onClick: fetchUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"\\uB2E4\\uC2DC\\uBD88\\uB7EC\\uC624\\uAE30\"));\n}\n\nexport default Users;","map":{"version":3,"sources":["/Users/pokeoseu/Desktop/React-Self-Study/api-integrate/api/src/Users.js"],"names":["React","useState","useEffect","axios","Users","users","setUsers","loading","setLoading","error","setError","fetchUsers","response","get","data","e","map","user","id","username","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,KAAT,GAAiB;AAAA,oBACWH,QAAQ,CAAC,IAAD,CADnB;AAAA;AAAA,QACRI,KADQ;AAAA,QACDC,QADC;;AAAA,qBAEeL,QAAQ,CAAC,KAAD,CAFvB;AAAA;AAAA,QAERM,OAFQ;AAAA,QAECC,UAFD;;AAAA,qBAGWP,QAAQ,CAAC,IAAD,CAHnB;AAAA;AAAA,QAGRQ,KAHQ;AAAA,QAGDC,QAHC;;AAKf,QAAMC,UAAU,GAAG,YAAY;AAAC;AAC9B,QAAI;AACFL,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,MAAAA,QAAQ,CAAC,IAAD,CAAR,CAFE,CAEa;;AACfF,MAAAA,UAAU,CAAC,IAAD,CAAV,CAHE,CAGe;;AAEjB,YAAMI,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,4CAAV,CAAvB;AACAP,MAAAA,QAAQ,CAACM,QAAQ,CAACE,IAAV,CAAR,CANE,CAMqB;AAExB,KARD,CAQE,OAAOC,CAAP,EAAU;AACV;AAEAL,MAAAA,QAAQ,CAACK,CAAD,CAAR,CAHU,CAGE;AACb;;AACDP,IAAAA,UAAU,CAAC,KAAD,CAAV,CAd6B,CAcZ;AAClB,GAfD;;AAiBAN,EAAAA,SAAS,CAAC,MAAM;AAEdS,IAAAA,UAAU;AACX,GAHQ,EAGN,EAHM,CAAT,CAtBe,CA2Bf;;AACA,MAAIJ,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACb,MAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAAP;AACX,MAAI,CAACJ,KAAL,EAAY,OAAO,IAAP,CA9BG,CA8BS;AAExB;;AACA,SACE,0CACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCA,KAAK,CAACW,GAAN,CAAUC,IAAI,IAAI;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAChBD,IAAI,CAACE,QADW,OACAF,IAAI,CAACG,IADL,MAAlB,CADD,CADA,EAMF;AAAQ,IAAA,OAAO,EAAET,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CANE,CADF;AAWD;;AACD,eAAeP,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction Users() {\n  const [users, setUsers] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchUsers = async () => {//useEffect을 사용하여 컴포넌트가 가장 처음에 렌더링이 될때 fetchUsers라는 함수를 호출한다.\n    try {\n      setUsers(null);\n      setError(null);//두가지 값을 초기화\n      setLoading(true);//로딩이 시작되었다는 것을 의미한다.\n\n      const response = await axios.get('http://jsonplaceholder.typicode.com/users/');\n      setUsers(response.data)//응답의 결과값을 보기위해,요청이 성공하면 setUsers의 값으로 설정을 해준다.setUsers 값을 바꾼다.\n\n    } catch (e) {\n      // console.log(e.response.status);\n      \n      setError(e);//error가 발생하면 에러의 값을 바꾼다.\n    }\n    setLoading(false)//제일 마지막으로 로딩이 끝났다는 것을 알려야 한다.\n  }\n\n  useEffect(() => {\n   \n    fetchUsers();\n  }, []);\n\n  //그다음에는 세가지 상태에 따라 다른 값을 렌더링 할 것이다.\n  if (loading) return <div>로딩중...</div>\n  if (error) return <div>에러 발생했습니다.</div>\n  if (!users) return null;//users에 제대로된 값이 들어가지않았을때\n\n  //users에 제대로된값이 들어갔을 경우에\n  return (\n    <>\n    <ul>\n    {users.map(user => <li key={user.id}>\n      {user.username}({user.name})\n  </li>)}\n  </ul>\n  <button onClick={fetchUsers}>다시불러오기</button>\n\n    </>\n      )\n}\nexport default Users;"]},"metadata":{},"sourceType":"module"}